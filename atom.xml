<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mainli-WIKI</title>
  
  <subtitle>wiki</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wiki.96kg.cn/"/>
  <updated>2019-08-09T08:51:14.919Z</updated>
  <id>http://wiki.96kg.cn/</id>
  
  <author>
    <name>Mainli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 触摸系列（一）View.onTouchEvent源码(28)分析</title>
    <link href="http://wiki.96kg.cn/2019/08/Android%E8%A7%A6%E6%91%B8-Android-%E8%A7%A6%E6%91%B8%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89View-onTouchEvent%E6%BA%90%E7%A0%81-28-%E5%88%86%E6%9E%90.html"/>
    <id>http://wiki.96kg.cn/2019/08/Android触摸-Android-触摸系列（一）View-onTouchEvent源码-28-分析.html</id>
    <published>2019-08-09T08:49:05.000Z</published>
    <updated>2019-08-09T08:51:14.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前置知识16进制书写二进制标识"><a href="#一、前置知识16进制书写二进制标识" class="headerlink" title="一、前置知识16进制书写二进制标识"></a>一、前置知识16进制书写二进制标识</h3><p>View源码中很多16进制标识int如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PFLAG_PREPRESSED          = <span class="number">0x02000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether the view is temporarily detached.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PFLAG_CANCEL_NEXT_UP_EVENT        = <span class="number">0x04000000</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>16进制对应2进制（用于做标记）<br>0x001 -&gt; 0000 0001    |   0x010 -&gt; 0001 0000<br>0x002 -&gt; 0000 0010    |   0x020 -&gt; 0010 0000<br>0x004 -&gt; 0000 0100    |   0x040 -&gt; 0100 0000<br>0x008 -&gt; 0000 1000    |   0x080 -&gt; 1000 0000<br>通过这组数据规律不难看出，16进制书写二进制01指定位置标识的方便之处</p></blockquote><a id="more"></a><ul><li><p>flag中添加标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   ....</span><br><span class="line">   <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">        <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">            mPrivateFlags3 |= PFLAG3_FINGER_DOWN;<span class="comment">//添加标识</span></span><br><span class="line">        &#125;</span><br><span class="line">        mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>flag中移除标识</p></li></ul><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeTapCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mPendingCheckForTap != <span class="keyword">null</span>) &#123;</span><br><span class="line">         mPrivateFlags &amp;= ~PFLAG_PREPRESSED;<span class="comment">//移除标识</span></span><br><span class="line">         removeCallbacks(mPendingCheckForTap);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="二、开始View-onTouchEvent-MotionEvent-触摸源码分析"><a href="#二、开始View-onTouchEvent-MotionEvent-触摸源码分析" class="headerlink" title="二、开始View.onTouchEvent(MotionEvent)触摸源码分析"></a>二、开始<code>View.onTouchEvent(MotionEvent)</code>触摸源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">                || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">                <span class="comment">//表示可以在上下文中单击此视图。当上下文可单击时，View通过通知</span></span><br><span class="line">                <span class="comment">//OnContextClickListener来响应上下文单击（例如，主要触控笔按下或鼠标右键单击）。</span></span><br><span class="line">                || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line">        <span class="comment">//判断是否启动</span></span><br><span class="line">        <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                setPressed(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">            <span class="comment">// A disabled view that is clickable still consumes the touch</span></span><br><span class="line">            <span class="comment">// events, it just doesn't respond to them.</span></span><br><span class="line">            <span class="keyword">return</span> clickable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//委托处理物理上在此视图中的触摸事件，但应由另一个视图处理。</span></span><br><span class="line">        <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TOOLTIP表示此视图可以在悬停或长按时显示工具提示。</span></span><br><span class="line">        <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">if</span> ((viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">                        handleTooltipUp();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                        mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                        mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 判断预按压对应在ACTION_DOWN添加标识</span></span><br><span class="line">                    <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                        <span class="comment">// 如果我们还没有它，请关注我们应该在</span></span><br><span class="line">                        <span class="comment">// 触摸模式</span></span><br><span class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                            focusTaken = requestFocus();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                            <span class="comment">// 按钮在我们实际显示为按下之前被释放。让它现在显示按下的状态（在调度点击方法之前）以确保用户看到按下状态</span></span><br><span class="line">                            setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//在没有执行长按前 ， mIgnoreNextUpEvent是action是ACTION_BUTTON_RELEASE是赋值true源码在12666行</span></span><br><span class="line">                        <span class="comment">//ACTION_BUTTON_RELEASE此Action不是触摸事件，因此它被传递给 View#onGenericMotionEvent(MotionEvent)而不是 View#onTouchEvent(MotionEvent)。</span></span><br><span class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                            <span class="comment">// 在Handler里移除长按延时检测事件</span></span><br><span class="line">                            removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 如果我们处于按下状态（别的View未获取焦点），则仅执行点击操作</span></span><br><span class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                                <span class="comment">// 使用Runnable并发布此消息到Handler而不是直接调用performClick。这样可以在单击操作开始之前更新视图的其他可视状态。</span></span><br><span class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                    performClickInternal();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//延时恢复点击状态 如按下时drawable变化</span></span><br><span class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                            postDelayed(mUnsetPressedState,</span><br><span class="line">                                    ViewConfiguration.getPressedStateDuration());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class="line">                            <span class="comment">// If the post failed, unpress right now</span></span><br><span class="line">                            mUnsetPressedState.run();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//移除ACTION_DOWN添加的PFLAG_PREPRESSED标识</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    <span class="comment">//判断是否是触摸屏输入</span></span><br><span class="line">                    <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">                        mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//重置长按状态</span></span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//如果不能点击直接检查长按状态</span></span><br><span class="line">                    <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//鼠标左键右键按下时执行按钮操作</span></span><br><span class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 向上遍历层次结构以确定我们是否在滚动容器内。</span></span><br><span class="line">                    <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 对于滚动容器内的视图，如果有滚动</span></span><br><span class="line">                    <span class="comment">// 将按下的反馈延迟一小段时间。</span></span><br><span class="line">                    <span class="comment">// 通过这一小段时间判断是否大于滚动伐值</span></span><br><span class="line">                    <span class="comment">// 伐值一般为ViewConfiguration.get(context).getScaledTouchSlop()</span></span><br><span class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;<span class="comment">//添加预按压标记</span></span><br><span class="line">                        <span class="comment">//mPendingCheckForTap是一个Runable run方法中去除PFLAG_PREPRESSED标识并执行setPressed(true, x, y);和checkForLongClick(ViewConfiguration.getTapTimeout(), x, y);（检查长按刨除预压占用时间)</span></span><br><span class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPendingCheckForTap.x = event.getX();</span><br><span class="line">                        mPendingCheckForTap.y = event.getY();</span><br><span class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 不在滚动容器内，所以立即显示反馈</span></span><br><span class="line">                        setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                        checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                        setPressed(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                    <span class="keyword">if</span> (clickable) &#123; <span class="comment">// 分发给背景（Drawable）触摸移动</span></span><br><span class="line">                        drawableHotspotChanged(x, y);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 用于确定给定点（在本地坐标中）是否在视图内的实用方法，其中视图的区域由mTouchSlop扩展。 在处理触摸移动事件时调用此方法，以确定事件是否仍在视图中</span></span><br><span class="line">                    <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</span><br><span class="line">                        <span class="comment">// 删除任何将来的长按/点击检查</span></span><br><span class="line">                        removeTapCallback();</span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                            setPressed(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前置知识16进制书写二进制标识&quot;&gt;&lt;a href=&quot;#一、前置知识16进制书写二进制标识&quot; class=&quot;headerlink&quot; title=&quot;一、前置知识16进制书写二进制标识&quot;&gt;&lt;/a&gt;一、前置知识16进制书写二进制标识&lt;/h3&gt;&lt;p&gt;View源码中很多16进制标识int如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PFLAG_PREPRESSED          = &lt;span class=&quot;number&quot;&gt;0x02000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Indicates whether the view is temporarily detached.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PFLAG_CANCEL_NEXT_UP_EVENT        = &lt;span class=&quot;number&quot;&gt;0x04000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;16进制对应2进制（用于做标记）&lt;br&gt;0x001 -&amp;gt; 0000 0001    |   0x010 -&amp;gt; 0001 0000&lt;br&gt;0x002 -&amp;gt; 0000 0010    |   0x020 -&amp;gt; 0010 0000&lt;br&gt;0x004 -&amp;gt; 0000 0100    |   0x040 -&amp;gt; 0100 0000&lt;br&gt;0x008 -&amp;gt; 0000 1000    |   0x080 -&amp;gt; 1000 0000&lt;br&gt;通过这组数据规律不难看出，16进制书写二进制01指定位置标识的方便之处&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://wiki.96kg.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>线程启动与停止</title>
    <link href="http://wiki.96kg.cn/2019/08/%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2.html"/>
    <id>http://wiki.96kg.cn/2019/08/线程-线程启动与停止.html</id>
    <published>2019-08-08T08:47:05.000Z</published>
    <updated>2019-08-09T08:48:41.467Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、线程启动"><a href="#一、线程启动" class="headerlink" title="一、线程启动"></a>一、线程启动</h4><ol><li><p>直接启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br></pre></td></tr></table></figure></li><li><p>线程池</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Executor threadPoolExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">threadPoolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Future&lt;?&gt; submit = threadPoolExecutor.submit(<span class="keyword">new</span> Callable&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞当前线程LockSupport.parkNanos(this, nanos)或者LockSupport.park(Object blocker)</span></span><br><span class="line"><span class="comment"> * 解锁阻塞LockSupport.unpark(Thread thread)</span></span><br><span class="line"><span class="comment"> * 在java6之后在park系列方法新增加了入参Object blocker，用于标识阻塞对象，该对象主要用于问题排查和系统监控。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Object o2 = submit.get();<span class="comment">//得到返回值会阻塞当前线程</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;<span class="comment">//待会讲异常</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部通过Executors.callable(runnable, result);包装成RunnableAdapter返回一个被设置为final的result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">submit = threadPoolExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Object o2 = submit.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、线程停止"><a href="#二、线程停止" class="headerlink" title="二、线程停止"></a>二、线程停止</h4><h5 id="Ⅰ-线程终止"><a href="#Ⅰ-线程终止" class="headerlink" title="Ⅰ 线程终止"></a>Ⅰ 线程终止</h5><ol><li>直接停止使用<del>stop</del>方法，暴力终止。<ul><li>可能使一些清理性的工作得不到完成。</li><li>可能对锁定的内容进行解锁，容易造成数据不同步的问题。</li></ul></li><li>使用自定义标识终止<ul><li>标识同步需要解决，否则可能根本停不下来</li><li>解决类似如<code>Thread.sleep(100)</code>浪费时间问题</li></ul></li><li><p>使用<code>Thread.interrupt()</code>方法中断线程。</p><ul><li>java原生添加的中断标识并不会真正中断线程，需要自己手动使用<code>thread.isInterrupted()</code>或<code>Thread.interrupted();</code>判断</li><li>直接终止<code>join()</code>,<code>sleep()</code>,<code>wait()</code>等一系列等待方法并抛出InterruptedException异常。<code>Future.get()</code>并不会马上停止而是等待<code>LockSupport.unpark(Thread thread)</code>调用之后判断标识抛出异常</li><li><p>如果在{@link java.nio.channels.InterruptibleChannel InterruptibleChannel} 的I / O操作中阻塞了该线程，那么通道将被关闭，线程的中断*状态将被设置，线程将收到{ @link java.nio.channels.ClosedByInterruptException}。</p><blockquote><ol><li><code>Thread.interrupted();</code>方法会清理<code>Thread.interrupt()</code>设置的中断标识为不中断</li><li>收到<code>InterruptedException</code>异常之后做线程清理工作</li></ol></blockquote></li></ul></li></ol><h5 id="Ⅱ-线程池的终止"><a href="#Ⅱ-线程池的终止" class="headerlink" title="Ⅱ 线程池的终止"></a>Ⅱ 线程池的终止</h5><ol><li>线程池中单次Task停止使用<code>Future..cancel(boolean mayInterruptIfRunning)</code>方法，启动<code>mayInterruptIfRunning</code>参数为<code>true</code>时会调用<code>Thread.interrupt()</code></li><li><code>ExecutorService.shutdown()</code>有序关闭，其中之前提交的任务继续被执行，但不会接受任何新任务。如果继续<code>submit()</code>添加任务则抛出<code>RejectedExecutionException</code>异常不会执行新的任务。</li><li><code>List&lt;Runnable&gt; runnables = executorService.shutdownNow();</code>立即停止，正在执行的会使用<code>Thread.interrupt()</code>修改终止，还未被执行的runnable返回。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExecuteService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> TestRunnable(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span> * <span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(1)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(1)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(2)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(2)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(3)</span></span><br><span class="line"><span class="comment">         * Exception in thread "main" java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@5e2de80c rejected from java.util.concurrent.ThreadPoolExecutor@1d44bcfa[Shutting down, pool size = 1, active threads = 1, queued tasks = 7, completed tasks = 2]</span></span><br><span class="line"><span class="comment">         * at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)</span></span><br><span class="line"><span class="comment">         * at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)</span></span><br><span class="line"><span class="comment">         * at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)</span></span><br><span class="line"><span class="comment">         * at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)</span></span><br><span class="line"><span class="comment">         * at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:678)</span></span><br><span class="line"><span class="comment">         * at com.TestExecuteService.main(TestExecuteService.java:20)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(3)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(4)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(4)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(5)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(5)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(6)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(6)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(7)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(7)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(8)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(8)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(9)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(9)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(10)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(10)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        executorService.shutdown();</span></span><br><span class="line"><span class="comment">//        executorService.submit(new TestRunnable(11));</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(1)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(1)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(2)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(2)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(3)</span></span><br><span class="line"><span class="comment">         * ---------------------------</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(4)</span></span><br><span class="line"><span class="comment">         * ******-------*******中断了:3</span></span><br><span class="line"><span class="comment">         * ---------执行结束(4)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(5)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(5)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(6)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(6)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(7)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(7)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(8)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(8)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(9)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(9)</span></span><br><span class="line"><span class="comment">         * +++++++++开始执行(10)</span></span><br><span class="line"><span class="comment">         * ---------执行结束(10)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Runnable&gt; runnables = executorService.shutdownNow();</span><br><span class="line">        System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Runnable runnable : runnables) &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestRunnable</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"+++++++++开始执行("</span> + index + <span class="string">")"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">100</span> * index);</span><br><span class="line">                System.out.println(<span class="string">"---------执行结束("</span> + index + <span class="string">")"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"******-------*******中断了:"</span> + index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、线程启动&quot;&gt;&lt;a href=&quot;#一、线程启动&quot; class=&quot;headerlink&quot; title=&quot;一、线程启动&quot;&gt;&lt;/a&gt;一、线程启动&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接启动&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程池&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://wiki.96kg.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>修改并编译framework</title>
    <link href="http://wiki.96kg.cn/2019/06/framework-%E4%BF%AE%E6%94%B9%E5%B9%B6%E7%BC%96%E8%AF%91framework.html"/>
    <id>http://wiki.96kg.cn/2019/06/framework-修改并编译framework.html</id>
    <published>2019-06-10T08:36:29.000Z</published>
    <updated>2019-08-09T08:36:51.871Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>关闭dex优化否则，编译完framework之后 push 不生效</p><ol><li>在<code>./build/core/dex_preopt.mk</code>文件中修改<code>DEX_PREOPT_DEFAULT</code>的值为<code>false</code>,修改后如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The default value <span class="keyword">for</span> LOCAL_DEX_PREOPT</span></span><br><span class="line">DEX_PREOPT_DEFAULT ?= false</span><br></pre></td></tr></table></figure><ol start="2"><li>搜索<code>GLOBAL_DEXPREOPT_FLAGS :=</code>，在这行之后添加<code>WITH_DEXPREOPT := false</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLOBAL_DEXPREOPT_FLAGS :=</span><br><span class="line">WITH_DEXPREOPT := false</span><br></pre></td></tr></table></figure><ol start="3"><li>如果之前编译过源码需要删除<code>out</code>目录重新编译,没编译过的直接跳过</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf out/</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li>修改Activity源码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ContextThemeWrapper</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">LayoutInflater</span>.<span class="title">Factory2</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Window</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>,</span></span><br><span class="line"><span class="class">        <span class="title">OnCreateContextMenuListener</span>, <span class="title">ComponentCallbacks2</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Window</span>.<span class="title">OnWindowDismissedCallback</span>, <span class="title">WindowControllerCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Activity"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG_LIFECYCLE = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Standard activity result: operation canceled. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_CANCELED    = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** Standard activity result: operation succeeded. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_OK           = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** Start of user-defined activity results. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_FIRST_USER   = <span class="number">1</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里修改<code>DEBUG_LIFECYCLE</code>为<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_LIFECYCLE) Slog.v(TAG, <span class="string">"onCreate "</span> + <span class="keyword">this</span> + <span class="string">": "</span> + savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (mLastNonConfigurationInstances != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFragments.restoreLoaderNonConfig(mLastNonConfigurationInstances.loaders);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>DEBUG_LIFECYCLE</code>控制声明周期log</p><ol start="3"><li>使用<code>make framewok</code>重新编译<code>framewoke</code>,如果之前没有编译过则需要完全编译使用<code>make -j8</code></li></ol><blockquote><p>提示:</p><p>​    编译前,需要<code>source ./build/envsetup.sh</code>和<code>lunch</code>流程,不懂可以看我的上篇<a href="https://wiki.96kg.cn/2019/06/framework-编译android8-1源码并刷入Pixel.html">编译android8-1源码并刷入Pixel</a></p></blockquote><ol start="4"><li>刷入并重启framework层</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">刷入framework.jar</span></span><br><span class="line">adb push out/target/product/sailfish/system/framework/framework.jar /system/framework/</span><br><span class="line"><span class="meta">#</span><span class="bash">重启framework</span></span><br><span class="line">adb shell stop;start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;关闭dex优化否则，编译完framework之后 push 不生效&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;./build/core/dex_preopt.mk&lt;/code&gt;文件中修改&lt;code&gt;DEX_PREOPT_DEFAULT&lt;/code&gt;的值为&lt;code&gt;false&lt;/code&gt;,修改后如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; The default value &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; LOCAL_DEX_PREOPT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEX_PREOPT_DEFAULT ?= false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;搜索&lt;code&gt;GLOBAL_DEXPREOPT_FLAGS :=&lt;/code&gt;，在这行之后添加&lt;code&gt;WITH_DEXPREOPT := false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLOBAL_DEXPREOPT_FLAGS :=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WITH_DEXPREOPT := false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;如果之前编译过源码需要删除&lt;code&gt;out&lt;/code&gt;目录重新编译,没编译过的直接跳过&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm -rf out/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="framework层" scheme="http://wiki.96kg.cn/tags/framework%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>编译android8.1源码并刷入Pixel</title>
    <link href="http://wiki.96kg.cn/2019/06/framework-%E7%BC%96%E8%AF%91android8-1%E6%BA%90%E7%A0%81%E5%B9%B6%E5%88%B7%E5%85%A5Pixel.html"/>
    <id>http://wiki.96kg.cn/2019/06/framework-编译android8-1源码并刷入Pixel.html</id>
    <published>2019-06-05T08:02:41.000Z</published>
    <updated>2019-08-09T08:36:51.871Z</updated>
    
    <content type="html"><![CDATA[<ol><li>环境准备<ul><li>Ubuntu 19.04</li><li>Pixel手机</li><li>android-8.1.0源码<a id="more"></a></li></ul></li><li><p>源码下载</p><ul><li><p>首先确定源码git的分支，通过访问<a href="https://source.android.com/setup/start/build-numbers" target="_blank" rel="noopener">https://source.android.com/setup/start/build-numbers</a>查询<img src="/images/framework/分支选取.png" alt="分支选取"> 这里看到支持Pixel的8.1.0分支最后一版为android-8.1.0_r38（细分版本：OPM4.171019.021.P1）细分版本在下载驱动时用到。</p></li><li><p>确定完分支，安装<code>repo</code>工具准备开始下载（<code>repo</code> 是一款工具，可让您在 Android 环境中更轻松地使用 Git。要详细了解 <code>repo</code>，请参阅<a href="https://source.android.com/source/developing.html" target="_blank" rel="noopener">开发</a>部分。），安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></li><li><p>选取国内源开始下载，不推荐google源你懂的。</p><ul><li>清华提供的镜像源（<a href="https://aosp.tuna.tsinghua.edu.cn/platform/manifest）" target="_blank" rel="noopener">https://aosp.tuna.tsinghua.edu.cn/platform/manifest）</a></li><li>中国科学技术大学的镜像源（git://mirrors.ustc.edu.cn/aosp/platform/manifest）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建立文件夹</span></span><br><span class="line">mkdir android-8.1.0_r38</span><br><span class="line">cd android-8.1.0_r38</span><br><span class="line"><span class="meta">#</span><span class="bash"> repo init推荐使用-b 分支标签、--depth=1和--platform=auto这几个选项加快速度</span></span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-8.1.0_r38 --depth=1 --platform=auto</span><br><span class="line"><span class="meta">#</span><span class="bash"> repo sync推荐使用--current-branch选项加快速度，中科大限制了每个用户最多使用4线程，因此指定-j8选项并不能提高下载速度，所以使用j4 4线程下载。</span></span><br><span class="line">repo sync -f -j4 --current-branch</span><br></pre></td></tr></table></figure><blockquote><p>因为这一步才是真正的从服务器把源码下拉的过程，repo相当与是执行了多个git，期间有一个git出问题，比如网络卡神马的就中断，然后就是重复repo sync。。。。，这里防止多次失败笔者改用一个脚本去 执行<code>repo sunc</code>，在android-8.1.0_r38下建立一个<code>down.sh</code>文件内容如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> !/bin/bash</span></span><br><span class="line">echo ¨================start repo sync===============¨</span><br><span class="line">repo sync -f -j4 --current-branch</span><br><span class="line">while [ $? == 1 ]; do</span><br><span class="line">echo ¨================sync failed, re-sync again=============¨</span><br><span class="line">sleep 3</span><br><span class="line">repo sync -f -j4 --current-branch</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>   保存完，执行如下开始下载。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x down.sh</span><br><span class="line">./down.sh</span><br></pre></td></tr></table></figure><blockquote><p>   下载较慢，耐心等待。所有源码下载完毕，其余文件夹就会出现。</p></blockquote></li><li><p>下载驱动<br>打开<a href="https://developers.google.com/android/drivers" target="_blank" rel="noopener">https://developers.google.com/android/drivers</a>,搜索细分版本（OPM4.171019.021.P1）找到驱动<img src="/images/framework/驱动OPM4.171019.021.P1.png" alt="驱动OPM4.171019.021.P1"></p><p>点击Link下载这两个文件并解压，得到两个脚本如下：</p><p><img src="/images/framework/驱动OPM4.171019.021.P1下载脚本.png" alt="驱动OPM4.171019.021.P1下载脚本"></p><p>重复执行两个脚本，两个脚本都是一路回车到最后根据提示输入<code>I ACCEPT</code>同意协议</p><p><img src="/images/framework/驱动同意协议.png" alt="驱动同意协议"></p><blockquote><p>注：一路回车到最后最好一下以下按，按多了直接结束脚本了。</p></blockquote><p>脚本执行完之后得到vendor，移动vendor文件夹到源码目录android-8.1.0_r38下。</p></li></ul></li><li><p>备份源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到android-8.1.0_r38,删除.repo</span></span><br><span class="line">rm -rf  .repo</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到android-8.1.0_r38父目录</span></span><br><span class="line">tar -zcvf android-8.1.0_r38.tar.gz android-8.1.0_r38/</span><br></pre></td></tr></table></figure></li><li><p>编译</p><ul><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 </span><br><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib </span><br><span class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 </span><br><span class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential  </span><br><span class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib </span><br><span class="line">sudo apt-get install libc6-dev-i386 </span><br><span class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev </span><br><span class="line">sudo apt-get install lib32z-dev ccache</span><br><span class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br></pre></td></tr></table></figure><blockquote><p>笔者安装以来过程中遇到libncurses5-dev:i386和lib32ncurses5-dev版本安装过高问题</p><p>使用如下命令根据提示解决依赖版本问题</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install libncurses5-dev:i386</span><br><span class="line">sudo aptitude install lib32ncurses5-dev</span><br></pre></td></tr></table></figure></li><li><p>安装Open JDK8，并配置环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装jdk8</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk </span><br><span class="line"><span class="meta">#</span><span class="bash">配置环境变量</span></span><br><span class="line">gedit ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在bashrc末尾追加</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">去除所有本地化的设置，让命令能正确执行 最好加上这句不加有坑</span></span><br><span class="line">export LC_ALL=C</span><br><span class="line"><span class="meta">#</span><span class="bash">别忘了<span class="built_in">source</span>下</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>开始编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">导入编译Android源码所需的环境变量。这里面包含lunch命令环境变量</span></span><br><span class="line">source build/envsetup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">选择编译类型，sailfish是pixel手机代号，eng: 工程机，user:最终用户机userdebug:调试测试机tests:测试机</span></span><br><span class="line">lunch aosp_sailfish-userdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">使用make开始编译，使用j8 8线程</span></span><br><span class="line">make clean; make -j8</span><br></pre></td></tr></table></figure><blockquote><p>一般两小时编译完，编译完建议重启 莫名的ubuntu很卡</p></blockquote></li></ul></li><li><p>输入手机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启需要重新配置Android源码所需的环境变量</span></span><br><span class="line">source build/envsetup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">还需要重新确定版本</span></span><br><span class="line">lunch aosp_sailfish-userdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">插入数据线，重启手机进入bootloader</span></span><br><span class="line">adb reboot bootloader</span><br><span class="line"><span class="meta">#</span><span class="bash">开始刷入</span></span><br><span class="line">fastboot flashall -w</span><br></pre></td></tr></table></figure><blockquote><p>这里如果手机版本比8.1高，可能刷入后，手机进入不了系统</p><p>这里笔者是重新从<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">官方下载</a>8.1（细分版本：OPM4.171019.021.P1）镜像刷入之后正常启动系统，重新执行<code>fastboot flashall -w</code>刷入正常启动</p></blockquote></li><li><p>最后展示一张成功启动进入系统中关于中的编译信息</p><p><img src="/images/framework/成功输入启动.png" alt="成功输入启动"></p></li></ol><blockquote><p> 参考<a href="http://seekting.96kg.cn/out/out/README.html" target="_blank" rel="noopener">seekting博客</a>中两篇，如下：</p><ul><li><a href="http://seekting.96kg.cn/out/out/android/android/content/4_framework/2_nexus6p%E5%88%B7%E6%9C%BA%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F/content.html" target="_blank" rel="noopener">nexus6p刷机源码系统</a></li><li><a href="http://seekting.96kg.cn/out/out/android/android/content/4_framework/6_%E7%BC%96%E8%AF%91android9%E5%B9%B6%E5%88%B7%E5%88%B0pixl%E9%87%8C/content.html" target="_blank" rel="noopener">编译android9并刷到pixl里</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;环境准备&lt;ul&gt;
&lt;li&gt;Ubuntu 19.04&lt;/li&gt;
&lt;li&gt;Pixel手机&lt;/li&gt;
&lt;li&gt;android-8.1.0源码
    
    </summary>
    
    
      <category term="framework层" scheme="http://wiki.96kg.cn/tags/framework%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>RxJava之map转换</title>
    <link href="http://wiki.96kg.cn/2019/03/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-RxJava%E4%B9%8Bmap%E8%BD%AC%E6%8D%A2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>http://wiki.96kg.cn/2019/03/源码解析-RxJava之map转换源码解析.html</id>
    <published>2019-03-25T04:55:54.000Z</published>
    <updated>2019-08-09T08:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>首先是Map代码调用 把222转换为666</p><ul><li><code>StartOnSubscribe</code> 被订阅者</li><li><code>Func1</code> 转换func</li><li><code>ResultSubscriber</code> 订阅者<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Observable.create(<span class="keyword">new</span> StartOnSubscribe()).map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> ResultSubscriber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StartOnSubscribe</span> <span class="keyword">implements</span> <span class="title">Observable</span>.<span class="title">OnSubscribe</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            subscriber.onNext(<span class="number">222</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>然后看Observable的map方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">map</span><span class="params">(Func1&lt;? <span class="keyword">super</span> T, ? extends R&gt; func)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lift(<span class="keyword">new</span> OperatorMap&lt;T, R&gt;(func));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>封装了一个<code>OperatorMap</code>,而<code>OperatorMap</code>实现<code>Operator</code>其实是一个<code>Func1</code>的实现,其中构造方法里又传入一个Func1(这个有点像使用变换过的装饰着模式),同时还含有一个call方法返回内部定义的一个子类<code>MapSubscriber</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorMap</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Operator</span>&lt;<span class="title">R</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Subscriber&lt;? <span class="keyword">super</span> T&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> R&gt; o) &#123;</span><br><span class="line">        MapSubscriber&lt;T, R&gt; parent = <span class="keyword">new</span> MapSubscriber&lt;T, R&gt;(o, transformer);</span><br><span class="line">        o.add(parent);</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">...省略代码</span><br></pre></td></tr></table></figure><ul><li><code>MapSubscriber</code>一个订阅者在这个订阅者的内部<code>onNext</code>调用<code>map</code>方法传入的<code>Func1</code>执行map转换</li><li>MapSubscriber其实是最后传入的订阅者<code>ResultSubscriber</code>的一个代理类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static final class MapSubscriber&lt;T, R&gt; extends Subscriber&lt;T&gt; &#123;</span><br><span class="line">...省略代码</span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(T t) &#123;</span><br><span class="line">            R result;</span><br><span class="line">            </span><br><span class="line">            try &#123;</span><br><span class="line">                result = mapper.call(t);//此处mapper就是map方法传入的Func1(例子中222变成666的方法)</span><br><span class="line">            &#125; catch (Throwable ex) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(ex);</span><br><span class="line">                unsubscribe();</span><br><span class="line">                onError(OnErrorThrowable.addValueAsLastCause(ex, t));</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            actual.onNext(result);//这里actual是OperatorMap中call方法传入的父订阅者(ResultSubscriber)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line">          ...省略代码</span><br><span class="line">            actual.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        @Override</span><br><span class="line">        public void onCompleted() &#123;</span><br><span class="line">       ...省略代码</span><br><span class="line">            actual.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">...省略代码</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>看完<code>OperatorMap</code>继续往下看<code>map</code>方法中调用的<code>lift</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">lift</span><span class="params">(<span class="keyword">final</span> Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Observable&lt;R&gt;(<span class="keyword">new</span> OnSubscribeLift&lt;T, R&gt;(onSubscribe, operator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里又是一个代理模式,<code>OnSubscribeLift</code>代理原本的<code>onSubscribe</code>对象来完成<b>“订阅操作(具体流程比较复杂请参看源码)”</b></li><li><b>“订阅操作”</b>简单说就<code>.subscribe(new ResultSubscriber())</code>之后执行的一系列方法大致分可简化为三步。<ul><li>首先<code>Subscriber</code>的<code>onStart()</code></li><li>然后是<code>OnSubscribe</code>的<code>call</code>方法</li><li><code>call</code>方法中又相继执行<code>Subscriber</code>的<code>onNext</code>,<code>onError</code>,<code>onCompleted</code>方法</li></ul></li><li>这里一个弯就是原本的<code>Observable.create(new StartOnSubscribe())</code>产生的<code>Observable</code>被替换成<code>lift</code>方法new出来的<code>Observable</code>给替换了,原本的<code>Observable</code>并没有执行<strong>“订阅操作”</strong></li><li>过了这个弯就知道了<code>OnSubscribeLift</code>这个代理类执行了<b>“订阅操作”</b>,具体看<code>OnSubscribeLift</code>中都干了什么</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OnSubscribeLift</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">OnSubscribe</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> R&gt; o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//operator是构造方法传入的Func1的代理类</span></span><br><span class="line">            <span class="comment">//hook.onLift方法把传入的operator返回也就是调用operator的call方法返回Subscriber(MapSubscriber)</span></span><br><span class="line">            Subscriber&lt;? <span class="keyword">super</span> T&gt; st = hook.onLift(operator).call(o);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.onStart();</span><br><span class="line">            <span class="comment">//parent是构造方法传入的最开始Observable中OnSubscribe也就是StartOnSubscribe</span></span><br><span class="line">                parent.call(st);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                ...省略代码</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">           ...省略代码</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>StartOnSubscribe</code>的<code>call</code>方法在这里被执行了,在<code>call</code>中调用<code>st</code>的<code>onNext</code>传入<code>222</code>,也就是调用<code>MapSubscriber</code>的<code>onNext</code>方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static final class MapSubscriber&lt;T, R&gt; extends Subscriber&lt;T&gt; &#123;</span><br><span class="line">...省略代码</span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(T t) &#123;</span><br><span class="line">            R result;</span><br><span class="line">            </span><br><span class="line">            try &#123;</span><br><span class="line">                result = mapper.call(t);//此处mapper就是map方法传入的Func1(例子中222变成666的方法)</span><br><span class="line">            &#125; catch (Throwable ex) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(ex);</span><br><span class="line">                unsubscribe();</span><br><span class="line">                onError(OnErrorThrowable.addValueAsLastCause(ex, t));</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            actual.onNext(result);//这里actual是OperatorMap中call方法传入的父订阅者(ResultSubscriber)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line">          ...省略代码</span><br><span class="line">            actual.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        @Override</span><br><span class="line">        public void onCompleted() &#123;</span><br><span class="line">       ...省略代码</span><br><span class="line">            actual.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">...省略代码</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>再次看<code>MapSubscriber</code>的<code>onNext</code>执行过程,先转换然后调用被代理的真实Subscriber也就是<code>ResultSubscriber</code>的<code>onNext</code>方法</li></ul><p><strong>到这里就看完了整个过程还是比较复杂的。使用了变种装饰者模式与代理模式(PS:这两个模式不太好区分结构上差别不大多在用法上不同)</strong></p><hr><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>lift方法中为直接重新创建一个Observable未来有可能会改进,如果T与R类型一样,直接修改Observable的onSubscribe引用为新的OnSubscribeLift返回自身,可惜java没有判断泛型T与R类型上是否相同,只能期盼未来了</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先是Map代码调用 把222转换为666&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StartOnSubscribe&lt;/code&gt; 被订阅者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func1&lt;/code&gt; 转换func&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResultSubscriber&lt;/code&gt; 订阅者
    
    </summary>
    
    
      <category term="源码解析" scheme="http://wiki.96kg.cn/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>针对EditText的Markdown链接式文本编辑</title>
    <link href="http://wiki.96kg.cn/2019/03/%E8%87%AA%E5%AE%9A%E4%B9%89View-%E9%92%88%E5%AF%B9EditText%E7%9A%84Markdown%E9%93%BE%E6%8E%A5%E5%BC%8F%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91.html"/>
    <id>http://wiki.96kg.cn/2019/03/自定义View-针对EditText的Markdown链接式文本编辑.html</id>
    <published>2019-03-25T03:34:32.000Z</published>
    <updated>2019-08-09T08:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>静态效果图:</strong><br><img src="/images/针对EditText的Markdown链接式文本编-效果.png" alt></li><li><strong>最终转换为文本Markdown格式上传服务器:</strong><br><code>发一个帖子连接,带一个,点击[连接2](http://www.cmcm.com/zh-cn/)查看详情</code></li></ul><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示:"></a>效果演示:</h3><video width="320" height="640" controls><br>  <source src="/videos/针对EditText的Markdown链接式文本编-效果.mp4" type="video/mp4"><br></video><a id="more"></a><h3 id="1-光标处插入"><a href="#1-光标处插入" class="headerlink" title="1. 光标处插入"></a>1. 光标处插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedEditText</span> <span class="keyword">extends</span> <span class="title">AppCompatEditText</span> </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertLinked</span><span class="params">(String name, String url)</span> </span>&#123;</span><br><span class="line">        insertMDLinked(getSelectionEnd(), name, url, convertMDLinked(name, url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertMDLinked</span><span class="params">(String name, String url)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        stringBuilder.append(<span class="string">'['</span>);</span><br><span class="line">        stringBuilder.append(name);</span><br><span class="line">        stringBuilder.append(<span class="string">']'</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">'('</span>);</span><br><span class="line">        stringBuilder.append(url);</span><br><span class="line">        stringBuilder.append(<span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertMDLinked</span><span class="params">(<span class="keyword">int</span> where, String name, String url, String mdLinked)</span> </span>&#123;</span><br><span class="line">        Editable text = getText();</span><br><span class="line">        LinkeSpan span = <span class="keyword">new</span> LinkeSpan(getContext(),name, url, mdLinked);</span><br><span class="line">        text.insert(where, name);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand</span></span><br><span class="line"><span class="comment">     * to include text inserted at either their starting or ending point.</span></span><br><span class="line"><span class="comment">     * They can never have a length of 0 and are automatically removed</span></span><br><span class="line"><span class="comment">     * from the buffer if all the text they cover is removed.</span></span><br><span class="line"><span class="comment">     * SPAN_EXCLUSIVE_EXCLUSIVE类型的跨度不会展开</span></span><br><span class="line"><span class="comment">     * 以包括在其起点或终点插入的文本。</span></span><br><span class="line"><span class="comment">     * 它们的长度永远不会为0，如果删除了所有文本，</span></span><br><span class="line"><span class="comment">     * 它们将自动从缓冲区中删除。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        text.setSpan(span, where, where + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"><span class="comment">//-----------------------下面这行后面介绍----------------------------------</span></span><br><span class="line">        text.setSpan(<span class="keyword">new</span> ReplacementSelectSpan(), where, where + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">    &#125;</span><br><span class="line">...省略代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-LinkeSpan实现"><a href="#2-LinkeSpan实现" class="headerlink" title="2. LinkeSpan实现"></a>2. LinkeSpan实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkeSpan</span> <span class="keyword">extends</span> <span class="title">ReplacementSpan</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">LinkeSpan</span>&gt; </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(@NonNull Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, @Nullable Paint.FontMetricsInt fm)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (dp32 + dp4 + paint.measureText(urlName) + <span class="number">0.5F</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, @NonNull Paint paint)</span> </span>&#123;</span><br><span class="line">            sDrawableLiked.setBounds((<span class="keyword">int</span>) (x + dp8), top + ((bottom - top - sDrawableLiked.getMinimumHeight()) &gt;&gt; <span class="number">1</span>), (<span class="keyword">int</span>) (x + dp16 + dp8), bottom);</span><br><span class="line">            sDrawableLiked.draw(canvas);</span><br><span class="line">            <span class="keyword">int</span> color = paint.getColor();</span><br><span class="line">            paint.setColor(<span class="number">0xFF687FFF</span>);</span><br><span class="line">            canvas.drawText(<span class="keyword">this</span>.urlName, x + dp32, (<span class="keyword">float</span>) y, paint);</span><br><span class="line">            paint.setColor(color);</span><br><span class="line">        &#125;</span><br><span class="line">...省略代码</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-转换为Markdown连接式文本"><a href="#3-转换为Markdown连接式文本" class="headerlink" title="3. 转换为Markdown连接式文本"></a>3. 转换为Markdown连接式文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toMDString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Editable text = getText();</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">//获取LinkeSpan是按照加入顺序排序,并非文本中位置顺序</span></span><br><span class="line">        LinkeSpan[] linkes = text.getSpans(<span class="number">0</span>, text.length(), LinkeSpan.class);</span><br><span class="line">        <span class="keyword">for</span> (LinkeSpan linkeSpan : linkes) &#123;</span><br><span class="line">            linkeSpan.index = text.getSpanStart(linkeSpan);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(linkes);<span class="comment">//文本中位置顺序</span></span><br><span class="line">        <span class="keyword">char</span>[] tmp;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (LinkeSpan linke : linkes) &#123;</span><br><span class="line">            <span class="keyword">int</span> charCount = linke.index - start;</span><br><span class="line">            <span class="keyword">int</span> linkeNameSize = linke.urlName.length();</span><br><span class="line">            <span class="keyword">if</span> (charCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="keyword">new</span> <span class="keyword">char</span>[charCount];</span><br><span class="line">                text.getChars(start, linke.index, tmp, <span class="number">0</span>);</span><br><span class="line">                stringBuffer.append(tmp);</span><br><span class="line">                stringBuffer.append(linke.toString());</span><br><span class="line">                start = linke.index + linkeNameSize;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charCount == <span class="number">0</span>) &#123;</span><br><span class="line">                stringBuffer.append(linke.toString());</span><br><span class="line">                start += linkeNameSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//补足剩余字符</span></span><br><span class="line">        <span class="keyword">int</span> length = text.length();</span><br><span class="line">        <span class="keyword">if</span> (start &lt; length) &#123;</span><br><span class="line">            tmp = <span class="keyword">new</span> <span class="keyword">char</span>[length - start];</span><br><span class="line">            text.getChars(start, length, tmp, <span class="number">0</span>);</span><br><span class="line">            stringBuffer.append(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-Markdown连接回转显示"><a href="#4-Markdown连接回转显示" class="headerlink" title="4. Markdown连接回转显示"></a>4. Markdown连接回转显示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkDownURLMatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL_NAME = <span class="string">"[\\w \\(\\)\\t#&amp;%$@\\u4e00-\\u9fa5]*"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String HTTP = <span class="string">"(https?|ftp|file)://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)?"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MATCHER = <span class="string">"\\[("</span> + URL_NAME + <span class="string">")\\]\\(("</span> + HTTP + <span class="string">")\\)"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Pattern MD_URL_MATCHER = Pattern.compile(MATCHER);</span><br><span class="line">...省略代码</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收集文本中markdown链接 转换为SpannerString</span></span><br><span class="line"><span class="comment">     * 格式:[xxx](xxxx)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SpannableStringBuilder <span class="title">convertTextLinks</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Matcher m = MD_URL_MATCHER.matcher(text);</span><br><span class="line">        SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder();</span><br><span class="line">        <span class="keyword">int</span> lastIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            String name = m.group(<span class="number">1</span>);</span><br><span class="line">            String url = m.group(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                name = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lastIndex = convertLinkedSpan(text, m, spannableStringBuilder, lastIndex, name, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lastIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            spannableStringBuilder.append(text);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text.length() &gt; lastIndex) &#123;</span><br><span class="line">            appendEndText(spannableStringBuilder, text.substring(lastIndex, text.length()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            spannableStringBuilder.append(<span class="string">" "</span>);<span class="comment">//防止点击事件延长至整行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spannableStringBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">convertLinkedSpan</span><span class="params">(String text, Matcher m, SpannableStringBuilder spannableStringBuilder, <span class="keyword">int</span> lastIndex, String name, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = m.start();</span><br><span class="line">        String substring = text.substring(lastIndex, start);</span><br><span class="line">        spannableStringBuilder.append(substring);</span><br><span class="line">        <span class="keyword">int</span> urlTextStart = spannableStringBuilder.length();</span><br><span class="line">        spannableStringBuilder.append(name);</span><br><span class="line"><span class="comment">//ClickLinkeSpan仿照LinkeSpan并添加Click实现</span></span><br><span class="line">        spannableStringBuilder.setSpan(<span class="keyword">new</span> ClickLinkeSpan(name, url), urlTextStart, urlTextStart + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        lastIndex = m.end();</span><br><span class="line">        <span class="keyword">return</span> lastIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickLinkeSpan</span> <span class="keyword">extends</span> <span class="title">ReplacementSpan</span> <span class="keyword">implements</span> <span class="title">SpanClickable</span>, <span class="title">NoCopySpan</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        ...省略代码</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(@NonNull Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, @Nullable Paint.FontMetricsInt fm)</span> </span>&#123;</span><br><span class="line">                ...省略代码</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, @NonNull Paint paint)</span> </span>&#123;</span><br><span class="line">              ...省略代码</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">            Uri uri = Uri.parse(url);</span><br><span class="line">            Context context = widget.getContext();</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">            intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                context.startActivity(intent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">                Log.w(<span class="string">"LinkeSpan"</span>, <span class="string">"Actvity was not found for intent, "</span> + intent.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-点击效果实现-没有使用TextView的setMovementMethod-添加MovementMethod实现"><a href="#5-点击效果实现-没有使用TextView的setMovementMethod-添加MovementMethod实现" class="headerlink" title="5. 点击效果实现(没有使用TextView的setMovementMethod()添加MovementMethod实现)"></a>5. 点击效果实现(没有使用TextView的setMovementMethod()添加MovementMethod实现)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpanClickable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickableSpanListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ClickableSpanListener instance = <span class="keyword">new</span> ClickableSpanListener();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClickableSpanListener <span class="title">getInstantce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">                TextView textView = (TextView) view;</span><br><span class="line">                <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                    CharSequence text = textView.getText();</span><br><span class="line">                    <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">                        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">                        x -= textView.getTotalPaddingLeft();</span><br><span class="line">                        y -= textView.getTotalPaddingTop();</span><br><span class="line">                        x += textView.getScrollX();</span><br><span class="line">                        y += textView.getScrollY();</span><br><span class="line">                        Layout layout = textView.getLayout();</span><br><span class="line">                        <span class="keyword">int</span> line = layout.getLineForVertical(y);</span><br><span class="line">                        <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</span><br><span class="line">                        Spanned spannable = (Spanned) text;</span><br><span class="line">                        SpanClickable[] link = spannable.getSpans(off, off, SpanClickable.class);</span><br><span class="line">                        <span class="keyword">if</span> (link != <span class="keyword">null</span> &amp;&amp; link.length &gt; <span class="number">0</span> &amp;&amp; link[<span class="number">0</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">                                link[<span class="number">0</span>].onClick(textView);</span><br><span class="line">                            &#125;</span><br><span class="line">                            ret = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-开发中遇到的棘手问题"><a href="#6-开发中遇到的棘手问题" class="headerlink" title="6.开发中遇到的棘手问题"></a>6.开发中遇到的棘手问题</h3><ul><li><strong>选择BUG</strong><br>  <strong>BUG展示:</strong></li></ul><video width="320" height="640" controls><br>  <source src="/videos/针对EditText的Markdown链接式文本编-选择BUG.mp4" type="video/mp4"><br></video><p>通过代码跟踪最终找到选择是通过<code>android.widget.Editor</code>的<code>private boolean selectCurrentWord()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">selectCurrentWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line">        <span class="comment">// If a URLSpan (web address, email, phone...) is found at that position, select it.</span></span><br><span class="line">        URLSpan[] urlSpans = ((Spanned) mTextView.getText()).</span><br><span class="line">                getSpans(minOffset, maxOffset, URLSpan.class);</span><br><span class="line">        <span class="keyword">if</span> (urlSpans.length &gt;= <span class="number">1</span>) &#123;<span class="comment">//这里有限判断URLSpan如果有有限选中全部文本</span></span><br><span class="line">            URLSpan urlSpan = urlSpans[<span class="number">0</span>];</span><br><span class="line">            selectionStart = ((Spanned) mTextView.getText()).getSpanStart(urlSpan);</span><br><span class="line">            selectionEnd = ((Spanned) mTextView.getText()).getSpanEnd(urlSpan);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//选择单词 数字 词语</span></span><br><span class="line">            <span class="comment">// FIXME - We should check if there's a LocaleSpan in the text, this may be</span></span><br><span class="line">            <span class="comment">// something we should try handling or checking for.</span></span><br><span class="line">            <span class="keyword">final</span> WordIterator wordIterator = getWordIterator();</span><br><span class="line">            wordIterator.setCharSequence(mTextView.getText(), minOffset, maxOffset);</span><br><span class="line"></span><br><span class="line">            selectionStart = wordIterator.getBeginning(minOffset);</span><br><span class="line">            selectionEnd = wordIterator.getEnd(maxOffset);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (selectionStart == BreakIterator.DONE || selectionEnd == BreakIterator.DONE ||</span><br><span class="line">                    selectionStart == selectionEnd) &#123;</span><br><span class="line">                <span class="comment">// Possible when the word iterator does not properly handle the text's language</span></span><br><span class="line">                <span class="keyword">long</span> range = getCharClusterRange(minOffset);</span><br><span class="line">                selectionStart = TextUtils.unpackRangeStartFromLong(range);</span><br><span class="line">                selectionEnd = TextUtils.unpackRangeEndFromLong(range);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//设置选择文本</span></span><br><span class="line">       Selection.setSelection((Spannable) mTextView.getText(), selectionStart, selectionEnd);</span><br><span class="line">        <span class="keyword">return</span> selectionEnd &gt; selectionStart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//URLSpan源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> <span class="keyword">implements</span> <span class="title">ParcelablParcelableSpaneSpan</span> </span>&#123;</span><br><span class="line">...省略代码</span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanTypeIdInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TextUtils.URL_SPAN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">        Uri uri = Uri.parse(getURL());</span><br><span class="line">        Context context = widget.getContext();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">        intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.startActivity(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">            Log.w(<span class="string">"URLSpan"</span>, <span class="string">"Actvity was not found for intent, "</span> + intent.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...省略代码</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertMDLinked</span><span class="params">(<span class="keyword">int</span> where, String name, String url, String mdLinked)</span> </span>&#123;</span><br><span class="line">        Editable text = getText();</span><br><span class="line">        LinkeSpan span = <span class="keyword">new</span> LinkeSpan(getContext(),name, url, mdLinked);</span><br><span class="line">        text.insert(where, name);</span><br><span class="line">        text.setSpan(span, where, where + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"><span class="comment">//同一位置设置两种Span</span></span><br><span class="line">        text.setSpan(<span class="keyword">new</span> ReplacementSelectSpan(), where, where + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">    &#125;</span><br><span class="line">...省略代码</span><br></pre></td></tr></table></figure><ul><li><p><strong>复制BUG解决</strong></p><p>  <strong>BUG展示:</strong></p></li></ul><video width="320" height="640" controls><br>  <source src="/videos/针对EditText的Markdown链接式文本编-复制BUG解决.mp4" type="video/mp4"><br></video><p>前面通过<code>URLSpan</code>解决选择问题同时引入新问题<code>URLSpan</code>实现<code>ParcelableSpan</code>可被序列化复制,并且复制结果不允许<strong>自定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A special kind of Parcelable for objects that will serve as text spans.</span></span><br><span class="line"><span class="comment"> * This can only be used by code in the framework; it is not intended for</span></span><br><span class="line"><span class="comment"> * applications to implement their own Parcelable spans.</span></span><br><span class="line"><span class="comment"> * 对象的一种特殊的Parcelable，用作文本跨度。</span></span><br><span class="line"><span class="comment"> * 这只能由框架中的代码使用;, 它不适用于</span></span><br><span class="line"><span class="comment"> * 应用程序来实现自己的</span></span><br><span class="line"><span class="comment"> * Parcelable跨度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParcelableSpan</span> <span class="keyword">extends</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return a special type identifier for this span class.</span></span><br><span class="line"><span class="comment">     * 返回此span类的特殊类型标识符。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSpanTypeId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Internal implementation of &#123;<span class="doctag">@link</span> #getSpanTypeId()&#125; that is not meant to</span></span><br><span class="line"><span class="comment">     * be overridden outside of the framework.</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getSpanTypeId（）&#125;的内部实现，并不意味着在框架之外被覆盖。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSpanTypeIdInternal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Internal implementation of &#123;<span class="doctag">@link</span> Parcelable#writeToParcel(Parcel, int)&#125;</span></span><br><span class="line"><span class="comment">     * that is not meant to be overridden outside of the framework.</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Parcelable＃writeToParcel（Parcel，int）&#125; </span></span><br><span class="line"><span class="comment">     * 的内部实现，并不意味着在框架之外被覆盖。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeToParcelInternal</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终通过查看系统其Span实现找到NoCopySpan接口进行实现避免被<strong>复制</strong><br>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplacementSelectSpan</span> <span class="keyword">extends</span> <span class="title">URLSpan</span> <span class="keyword">implements</span> <span class="title">NoCopySpan</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ReplacementSelectSpan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>(<span class="string">""</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="源码-https-github-com-Android-Mainli-AndroidDemo2018"><a href="#源码-https-github-com-Android-Mainli-AndroidDemo2018" class="headerlink" title="源码:https://github.com/Android-Mainli/AndroidDemo2018"></a>源码:<a href="https://github.com/Android-Mainli/AndroidDemo2018" target="_blank" rel="noopener">https://github.com/Android-Mainli/AndroidDemo2018</a></h1>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态效果图:&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/针对EditText的Markdown链接式文本编-效果.png&quot; alt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最终转换为文本Markdown格式上传服务器:&lt;/strong&gt;&lt;br&gt;&lt;code&gt;发一个帖子连接,带一个,点击[连接2](http://www.cmcm.com/zh-cn/)查看详情&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;效果演示&quot;&gt;&lt;a href=&quot;#效果演示&quot; class=&quot;headerlink&quot; title=&quot;效果演示:&quot;&gt;&lt;/a&gt;效果演示:&lt;/h3&gt;&lt;video width=&quot;320&quot; height=&quot;640&quot; controls&gt;&lt;br&gt;  &lt;source src=&quot;/videos/针对EditText的Markdown链接式文本编-效果.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;
    
    </summary>
    
    
      <category term="自定义View" scheme="http://wiki.96kg.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>有趣的头像(hash值生成头像)</title>
    <link href="http://wiki.96kg.cn/2019/03/%E5%85%B6%E4%BB%96-%E6%9C%89%E8%B6%A3%E7%9A%84%E5%A4%B4%E5%83%8F-hash%E5%80%BC%E7%94%9F%E6%88%90%E5%A4%B4%E5%83%8F.html"/>
    <id>http://wiki.96kg.cn/2019/03/其他-有趣的头像-hash值生成头像.html</id>
    <published>2019-03-25T03:34:32.000Z</published>
    <updated>2019-08-09T08:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 请求 <a href="http://www.gravatar.com/avatar/{hash}?s=256&amp;d=identicon" target="_blank" rel="noopener">http://www.gravatar.com/avatar/{hash}?s=256&amp;d=identicon</a></p><ol><li>hash：生成一个随机数填充</li></ol><ul><li>s：尺寸，像素为单位</li><li>d：风格，目前可选 identicon、monsterid、wavatar、retro、robohash 等</li></ul><p><a href="https://en.gravatar.com/site/implement/images/" target="_blank" rel="noopener">来源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 请求 &lt;a href=&quot;http://www.gravatar.com/avatar/{hash}?s=256&amp;amp;d=identicon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.gravatar.com/avat
      
    
    </summary>
    
    
      <category term="其他" scheme="http://wiki.96kg.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>读AliJava规范手册随笔</title>
    <link href="http://wiki.96kg.cn/2019/03/%E9%9A%8F%E7%AC%94-%E8%AF%BBAliJava%E8%A7%84%E8%8C%83%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94.html"/>
    <id>http://wiki.96kg.cn/2019/03/随笔-读AliJava规范手册随笔.html</id>
    <published>2019-03-25T03:33:07.000Z</published>
    <updated>2019-08-09T08:36:51.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-命名-命名风格-风格"><a href="#一-命名-命名风格-风格" class="headerlink" title="(一)命名 命名风格 风格"></a><strong>(一)命名 命名风格 风格</strong></h1><ol><li><p>【强制】类名使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO /<br>PO 等。<br><br>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion<br><br>反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</p></li><li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>驼峰形式。<br><br>正例： localValue / getHttpMessage() / inputUserId</p><a id="more"></a></li><li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br><br>正例： MAX _ STOCK _ COUNT<br><br>反例： MAX _ COUNT</p></li><li><p>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类<br>命名以它要测试的类名开始，以 Test 结尾。</p></li><li><p>【强制】 POJO 类中布尔类型的变量，都不要加 is 前缀 ，否则部分框架解析会引起序列化错误。<br>反例：定义为基本数据类型 Boolean isDeleted； 的属性，它的方法也是 isDeleted() ， RPC<br>框架在反向解析的时候，“误以为”对应的属性名称是 deleted ，导致属性获取不到，进而抛<br>出异常。</p></li><li><p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。<br>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br><br>正例：<br><br>public class OrderFactory;<br><br>public class LoginProxy;<br><br>public class ResourceObserver;</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-命名-命名风格-风格&quot;&gt;&lt;a href=&quot;#一-命名-命名风格-风格&quot; class=&quot;headerlink&quot; title=&quot;(一)命名 命名风格 风格&quot;&gt;&lt;/a&gt;&lt;strong&gt;(一)命名 命名风格 风格&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】类名使用 UpperCamelCase 风格，但以下情形例外： DO / BO / DTO / VO / AO /&lt;br&gt;PO 等。&lt;br&gt;&lt;br&gt;正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion&lt;br&gt;&lt;br&gt;反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从&lt;br&gt;驼峰形式。&lt;br&gt;&lt;br&gt;正例： localValue / getHttpMessage() / inputUserId&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://wiki.96kg.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>读AliAndroid开发手册随笔</title>
    <link href="http://wiki.96kg.cn/2019/03/%E9%9A%8F%E7%AC%94-%E8%AF%BBAliAndroid%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94.html"/>
    <id>http://wiki.96kg.cn/2019/03/随笔-读AliAndroid开发手册随笔.html</id>
    <published>2019-03-25T03:31:26.000Z</published>
    <updated>2019-08-09T08:36:51.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三、Android基本组件"><a href="#三、Android基本组件" class="headerlink" title="三、Android基本组件"></a><strong>三、Android基本组件</strong></h3><ol><li><p><strong>Activity 间的数据通信，对于数据量比较大的，避免使用 Intent + Parcelable<br>的方式，可以考虑 EventBus 等替代方案，以免造成 TransactionTooLargeException。</strong></p></li><li><p><strong>Activity 间通过隐式 Intent 的跳转，在发出 Intent 之前必须通过 resolveActivity<br>检查，避免找不到合适的调用组件，造成 ActivityNotFoundException 的异常。</strong></p><a id="more"></a> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewUrl</span><span class="params">(String url, String mimeType)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setDataAndType(Uri.parse(url), mimeType);</span><br><span class="line">        <span class="keyword">if</span> (getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_</span><br><span class="line">                        ONLY) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Config.LOGD) &#123;</span><br><span class="line">                    Log.d(LOGTAG, <span class="string">"activity not found for "</span></span><br><span class="line">                    + mimeType + <span class="string">" over "</span>+Uri.parse(url).getScheme(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>避免在 Service#onStartCommand()/onBind()方法中执行耗时操作，如果确<br>实有需求，应改用 IntentService 或采用其他异步机制完成。</strong></p></li><li><p><strong>避免在 BroadcastReceiver#onReceive()中执行耗时操作，如果有耗时工作，<br>应该创建 IntentService 完成，而不应该在 BroadcastReceiver 内创建子线程去做。</strong><br><br>说明：<br>由于该方法是在主线程执行，如果执行耗时操作会导致 UI 不流畅。可以使用<br>IntentService 、 创 建 HandlerThread 或 者 调 用 Context#registerReceiver<br>(BroadcastReceiver, IntentFilter, String, Handler)方法等方式，在其他 Wroker 线程<br>执行 onReceive 方法。BroadcastReceiver#onReceive()方法耗时超过 10 秒钟，可<br>能会被系统杀死。</p></li><li><p><strong>当前Activity的onPause方法执行结束后才会执行下一个Activity的onCreate<br>方法，所以在 onPause 方法中不适合做耗时较长的工作，这会影响到页面之间的跳<br>转效率</strong></p></li><li><p><strong>Activity或者Fragment中动态注册BroadCastReceiver时，registerReceiver()和 unregisterReceiver()要成对出现。</strong><br>说明：<br>如果 registerReceiver()和 unregisterReceiver()不成对出现，则可能导致已经注册的<br>receiver 没有在合适的时机注销，导致内存泄漏，占用内存空间，加重 SystemService<br>负担。<br>部分华为的机型会对 receiver 进行资源管控，单个应用注册过多 receiver 会触发管<br>控模块抛出异常，应用直接崩溃。</p></li><li><p><strong>添加Fragment时，确保FragmentTransaction#commit()在<br>Activity#onPostResume()或者 FragmentActivity#onResumeFragments()内调用。<br>不要随意使用FragmentTransaction#commitAllowingStateLoss()来代替，任何<br>commitAllowingStateLoss()的使用必须经过 code review，确保无负面影响。</strong><br><br>说明：<br><br>Activity 可能因为各种原因被销毁，Android支持页面被销毁前通过<br>Activity#onSaveInstanceState()保存自己的状态。但如果<br>FragmentTransaction.commit()发生在 Activity 状态保存之后，就会导致 Activity 重<br>建、恢复状态时无法还原页面状态，从而可能出错。为了避免给用户造成不好的体<br>验，系统会抛出 IllegalStateExceptionStateLoss 异常。推荐的做法是在 Activity 的<br>onPostResume() 或 onResumeFragments() （ 对 FragmentActivity ） 里 执 行<br>FragmentTransaction.commit()，如有必要也可在 onCreate()里执行。不要随意改用<br>FragmentTransaction.commitAllowingStateLoss()或者直接使用 try-catch 避免<br>crash，这不是问题的根本解决之道，当且仅当你确认 Activity 重建、恢复状态时，<br>本次 commit 丢失不会造成影响时才可这么做。</p></li><li><p><strong>【推荐】</strong>不要在 Activity#onDestroy()内执行释放资源的工作，例如一些工作线程的<br>销毁和停止，因为 onDestroy()执行的时机可能较晚。可根据实际需要，在<br>Activity#onPause()/onStop()中结合 isFinishing()的判断来执行。</p></li><li><p><strong>【推荐】如非必须，避免使用嵌套的 Fragment</strong>。<br><br>说明：<br><br>嵌套 Fragment 是在 Android API 17 添加到 SDK 以及 Support 库中的功能，<br>Fragment 嵌套使用会有一些坑，容易出现 bug，比较常见的问题有如下几种：<br>1) onActivityResult()方法的处理错乱，内嵌的 Fragment 可能收不到该方法的回调，<br>需要由宿主 Fragment 进行转发处理；<br>2) 突变动画效果；<br>3) 被继承的 setRetainInstance()，导致在 Fragment 重建时多次触发不必要的逻<br>辑。<br>非必须的场景尽可能避免使用嵌套 Fragment，如需使用请注意上述问题。</p></li><li><p>Service 需要以多线程来并发处理多个启动请求，建议使用 IntentService，<br>可避免各种复杂的设置。<br><br>说明：<br><br>Service 组件一般运行主线程，应当避免耗时操作，如果有耗时操作应该在 Worker<br>线程执行。 可以使用 IntentService 执行后台任务。</p></li><li><p>【推荐】对于只用于应用内的广播，优先使用 LocalBroadcastManager 来进行注册<br>和发送，LocalBroadcastManager 安全性更好，同时拥有更高的运行效率。<br>说明：<br>对于使用 Context#sendBroadcast()等方法发送全局广播的代码进行提示。如果该广<br>播仅用于应用内，则可以使用 <figure class="highlight plain"><figcaption><span>来避免广播泄漏以及广播被</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">拦截等安全问题，同时相对全局广播本地广播的更高效。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### **四、UI与布局**</span><br><span class="line"></span><br><span class="line">1. **布局中不得不使用 ViewGroup 多重嵌套时，不要使用 LinearLayout 嵌套，</span><br><span class="line">改用 RelativeLayout，可以有效降低嵌套数。**&lt;br/&gt;</span><br><span class="line">说明：</span><br><span class="line">Android 应用页面上任何一个 View 都需要经过 measure、layout、draw 三个步骤</span><br><span class="line">才能被正确的渲染。从 xml layout 的顶部节点开始进行 measure，每个子节点都需</span><br><span class="line">要向自己的父节点提供自己的尺寸来决定展示的位置，在此过程中可能还会重新</span><br><span class="line">measure（由此可能导致 measure 的时间消耗为原来的 **2-3** 倍）。节点所处位置越</span><br><span class="line">深，套嵌带来的 measure 越多，计算就会越费时。这就是为什么扁平的 View 结构</span><br><span class="line">会性能更好。</span><br><span class="line">同时，页面拥上的 View 越多，measure、layout、draw 所花费的时间就越久。要缩</span><br><span class="line">短这个时间，关键是保持 View 的树形结构尽量扁平，而且要移除所有不需要渲染的</span><br><span class="line">View。理想情况下，总共的 measure，layout，draw 时间应该被很好的**控制在 16ms</span><br><span class="line">以内，以保证滑动屏幕时 UI 的流畅。**</span><br><span class="line">要找到那些多余的 View（增加渲染延迟的 view），可以用 Android Studio Monitor</span><br><span class="line">里的 Hierarachy Viewer 工具，可视化的查看所有的 view。</span><br><span class="line"></span><br><span class="line">2. **在 Activity 中显示对话框或弹出浮层时，尽量使用 DialogFragment，而非</span><br><span class="line">Dialog/AlertDialog，这样便于随Activity生命周期管理对话框/弹出浮层的生命周期。**</span><br><span class="line"></span><br><span class="line">3. **在需要时刻刷新某一区域的组件时，建议通过以下方式避免引发全局 layout刷新:**&lt;br/&gt;</span><br><span class="line">    1) 设置固定的 view 大小的高宽，如倒计时组件等；&lt;br/&gt;</span><br><span class="line">    2) 调用 view 的 layout 方式修改位置，如弹幕组件等；&lt;br/&gt;</span><br><span class="line">    3) 通过修改 canvas 位置并且调用 invalidate(int l, int t, int r, int b)等方式限定刷新</span><br><span class="line">    区域；&lt;br/&gt;</span><br><span class="line">    4) 通过设置一个是否允许 requestLayout 的变量，然后重写控件的 requestlayout、</span><br><span class="line">    onSizeChanged 方法 ， 判 断 控 件 的大小 没 有 改 变 的 情况下 ， 当 进 入</span><br><span class="line">    requestLayout 的时候，直接返回而不调用 super 的 requestLayout 方法。</span><br><span class="line">4. **【强制】不能使用 ScrollView 包裹 ListView/GridView/ExpandableListVIew;因为这</span><br><span class="line">样会把 ListView 的所有 Item 都加载到内存中，要消耗巨大的内存和 cpu 去绘制图</span><br><span class="line">面。**&lt;br/&gt;</span><br><span class="line">说明：</span><br><span class="line">ScrollView 中嵌套 List 或 RecyclerView 的做法官方明确禁止。除了开发过程中遇到</span><br><span class="line">的各种视觉和交互问题，这种做法对性能也有较大损耗。ListView 等 UI 组件自身有</span><br><span class="line">垂直滚动功能，也没有必要在嵌套一层 ScrollView。目前为了较好的 UI 体验，更贴</span><br><span class="line">近 Material Design 的设计，推荐使用 NestedScrollView。</span><br><span class="line"></span><br><span class="line">### **五、进程、线程与消息通信**</span><br><span class="line"></span><br><span class="line">1. **【强制】**不要通过 Intent 在 Android 基础组件之间传递大数据（binder transaction</span><br><span class="line">缓存为 1MB），可能导致 OOM。</span><br><span class="line"></span><br><span class="line">2. **【强制】**新建线程时，必须通过线程池提供（AsyncTask 或者 ThreadPoolExecutor</span><br><span class="line">或者其他形式自定义的线程池），不允许在应用中自行显式创建线程。&lt;br/&gt;</span><br><span class="line">说明：</span><br><span class="line">使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解</span><br><span class="line">决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致</span><br><span class="line">消耗完内存或者“过度切换”的问题。另外创建匿名线程不便于后续的资源使用分析，</span><br><span class="line">对性能分析等会造成困扰。</span><br><span class="line"></span><br><span class="line">3. **【强制】**线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方</span><br><span class="line">式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。&lt;br/&gt;</span><br><span class="line">**Executors 返回的线程池对象的弊端如下**：&lt;br/&gt;</span><br><span class="line">    1) FixedThreadPool 和 SingleThreadPool ： 允 许 的 请 求 队 列 长 度 为</span><br><span class="line">    Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM；&lt;br/&gt;</span><br><span class="line">    2) CachedThreadPool 和 ScheduledThreadPool ： 允 许的 创建线 程 数量 为</span><br><span class="line">    Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</span><br><span class="line"></span><br><span class="line">4. 【强制】不要在非 UI 线程中初始化 ViewStub，否则会返回 null。</span><br><span class="line"></span><br><span class="line">5.  ThreadPoolExecutor 设置线程存活时间(setKeepAliveTime)，确保空闲时</span><br><span class="line">线程能被释放。</span><br><span class="line"></span><br><span class="line">6.  禁 止 在多 进 程 之 间 用 SharedPreferences 共 享数 据 ， 虽 然 可 以</span><br><span class="line">(MODE_MULTI_PROCESS)，但官方已不推荐。</span><br><span class="line"></span><br><span class="line">7. **谨慎使用 Android 的多进程，多进程虽然能够降低主进程的内存压力，但会</span><br><span class="line">遇到如下问题：**&lt;br/&gt;</span><br><span class="line">    1) 不能实现完全退出所有 Activity 的功能；&lt;br/&gt;</span><br><span class="line">    2) 首次进入新启动进程的页面时会有延时的现象（有可能黑屏、白屏几秒，是白</span><br><span class="line">    屏还是黑屏和新 Activity 的主题有关）；&lt;br/&gt;</span><br><span class="line">    3) 应用内多进程时，Application 实例化多次，需要考虑各个模块是否都需要在所</span><br><span class="line">    有进程中初始化；&lt;br/&gt;</span><br><span class="line">    4) 多进程间通过 SharedPreferences 共享数据时不稳定。</span><br><span class="line">    </span><br><span class="line">### **六、文件与数据库**</span><br><span class="line">1. **【强制】**任何时候不要硬编码文件路径，请使用 Android 文件系统 API 访问。</span><br><span class="line">    说明：</span><br><span class="line">    Android 应用提供内部和外部存储，分别用于存放应用自身数据以及应用产生的用</span><br><span class="line">    户数据。可以通过相关 API 接口获取对应的目录，进行文件操作。</span><br><span class="line">    android.os.Environment#getExternalStorageDirectory()</span><br><span class="line">    android.os.Environment#getExternalStoragePublicDirectory()</span><br><span class="line">    android.content.Context#getFilesDir()</span><br><span class="line">    android.content.Context#getCacheDir</span><br><span class="line">    </span><br><span class="line">2. 【强制】应用间共享文件时，不要通过放宽文件系统权限的方式去实现，而应使用</span><br><span class="line">FileProvider。</span><br><span class="line">正例：</span><br><span class="line">    ```java</span><br><span class="line">        &lt;!-- AndroidManifest.xml --&gt;</span><br><span class="line">&lt;manifest&gt;</span><br><span class="line">...</span><br><span class="line">&lt;application&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;provider</span><br><span class="line">        android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">        android:authorities=&quot;com.example.fileprovider&quot;</span><br><span class="line">        android:exported=&quot;false&quot;</span><br><span class="line">        android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">        &lt;meta-data</span><br><span class="line">            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">            android:resource=&quot;@xml/provider_paths&quot;/&gt;</span><br><span class="line">    &lt;/provider&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br><span class="line">    &lt;!-- res/xml/provider_paths.xml --&gt;</span><br><span class="line">&lt;paths&gt;</span><br><span class="line">&lt;files-path</span><br><span class="line">    path=&quot;album/&quot;</span><br><span class="line">    name=&quot;myimages&quot;/&gt;</span><br><span class="line">&lt;/paths&gt;</span><br><span class="line">    </span><br><span class="line">     void getAlbumImage(String imagePath) &#123;</span><br><span class="line">        File image = new File(imagePath);</span><br><span class="line">        Intent getAlbumImageIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        Uri imageUri = FileProvider.getUriForFile(this,</span><br><span class="line">        &quot;com.example.provider&quot;,</span><br><span class="line">        image);</span><br><span class="line">        getAlbumImageIntent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class="line">        startActivityForResult(takePhotoIntent, REQUEST_GET_ALBUMIMAGE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li></ol><ol start="3"><li><p>SharedPreference 提交数据时，尽量使用 Editor#apply() ， 而非<br>Editor#commit()。一般来讲，仅当需要确定提交结果，并据此有后续操作时，才使<br>用Editor#commit()。<br><br>说明：<br>SharedPreference 相关修改使用 <strong>apply 方法进行提交会先写入内存，然后异步写入<br>磁盘</strong>，commit 方法是直接写入磁盘。如果频繁操作的话 apply 的性能会优于 commit，<br>apply 会将最后修改内容写入磁盘。但是如果希望立刻获取存储操作的结果，并据此<br>做相应的其他操作，应当使用 commit。</p></li><li><p>多线程操作写入数据库时，需要使用事务，以免出现同步问题。<br>说明：<br>Android 的通过 SQLiteOpenHelper 获取数据库 SQLiteDatabase 实例，Helper 中会<br>自动缓存已经打开的 SQLiteDatabase 实例，单个 App 中应使用 SQLiteOpenHelper<br>的单例模式确保数据库连接唯一。由于 SQLite 自身是数据库级锁，单个数据库操作<br>是保证线程安全的（不能同时写入），transaction 时一次原子操作，因此处于事务中<br>的操作是线程安全的。<br>若同时打开多个数据库连接，并通过多线程写入数据库，会导致数据库异常，提示<br>数据库已被锁住。<br>正例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserPhoto</span><span class="params">(SQLiteDatabase db, String userId, String content)</span></span>&#123;</span><br><span class="line">    ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    cv.put(<span class="string">"userId"</span>, userId);</span><br><span class="line">    cv.put(<span class="string">"content"</span>, content);</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        db.insert(TUserPhoto, <span class="keyword">null</span>, cv);</span><br><span class="line">        db.setTransactionSuccessful();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        db.endTransaction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>大数据写入数据库时，请使用事务或其他能够提高 I/O 效率的机制，保证执<br>行速度。<br>正例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBulk</span><span class="params">(SQLiteDatabase db, ArrayList&lt;UserInfo&gt; users)</span></span>&#123;</span><br><span class="line">      db.beginTransaction();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size; i++) &#123;</span><br><span class="line">              ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">              cv.put(<span class="string">"userId"</span>, users[i].userId);</span><br><span class="line">              cv.put(<span class="string">"content"</span>, users[i].content);</span><br><span class="line">              db.insert(TUserPhoto, <span class="keyword">null</span>, cv);</span><br><span class="line">          &#125;</span><br><span class="line">          db.setTransactionSuccessful();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">// TODO</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          db.endTransaction();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>执行 SQL 语句时，应使用 SQLiteDatabase#insert()、update()、delete()，<br>不要使用 SQLiteDatabase#execSQL()，以免 SQL 注入风险。<br>正例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUserPhoto</span><span class="params">(SQLiteDatabase db, String userId, String content)</span> </span>&#123;</span><br><span class="line">        ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        cv.put(<span class="string">"content"</span>, content);</span><br><span class="line">        String[] args = &#123;String.valueOf(userId)&#125;;</span><br><span class="line">        <span class="keyword">return</span> db.update(TUserPhoto, cv, <span class="string">"userId=?"</span>, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>如果 ContentProvider 管理的数据存储在 SQL 数据库中，应该避免将不受<br>信任的外部数据直接拼接在原始 SQL 语句中，可使用一个用于将 ? 作为可替换参<br>数的选择子句以及一个单独的选择参数数组，会避免 SQL 注入。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用一个可替换参数</span><br><span class="line">String mSelectionClause = &quot;var = ?&quot;;</span><br><span class="line">String[] selectionArgs = &#123;&quot;&quot;&#125;;</span><br><span class="line">selectionArgs[0] = mUserInput;</span><br></pre></td></tr></table></figure><p> 反例:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//拼接用户输入内容和列名</span><br><span class="line">String mSelectionClause = &quot;var = &quot; + mUserInput;</span><br></pre></td></tr></table></figure></li></ol><h3 id="七、Bitmap、Drawable-与动画"><a href="#七、Bitmap、Drawable-与动画" class="headerlink" title="七、Bitmap、Drawable 与动画"></a><strong>七、Bitmap、Drawable 与动画</strong></h3><ol><li><p><strong>【强制】</strong>加载大图片或者一次性加载多张图片，应该在异步线程中进行。图片的加<br>载，涉及到 IO 操作，以及 CPU 密集操作，很可能引起卡顿。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitmapWorkerTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Void</span>, <span class="title">Bitmap</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在后台进行图片解码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = BitmapFactory.decodeFile(<span class="string">"some path"</span>);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应根据实际展示需要，压缩图片，而不是直接显示原图。手机屏幕比较小，<br>直接显示原图，并不会增加视觉上的收益，但是却会耗费大量宝贵的内存。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">int</span> resId,<span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//首先通过inJustDecodeBounds=true获得图片的尺寸</span></span><br><span class="line">      <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">      options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">      BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">      <span class="comment">// 然后根据图片分辨率以及我们实际需要展示的大小，计算压缩率</span></span><br><span class="line">      options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line">      <span class="comment">// 设置压缩率，并解码</span></span><br><span class="line">      options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>针对不同的屏幕密度，提供对应的图片资源，使内存占用和显示效果达到<br>合理的平衡。如果为了节省包体积，可以在不影响 UI 效果的前提下，省略低密度图<br>片。</p></li><li><p><strong>使用 inBitmap 重复利用内存空间，避免重复开辟新内存。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromFile</span><span class="params">(String filename, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight, ImageCache cache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> BitmapFactory . Options options = <span class="keyword">new</span> BitmapFactory . Options ();</span><br><span class="line">    ...</span><br><span class="line">    BitmapFactory.decodeFile(filename, options);</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 如果在 Honeycomb 或更新版本系统中运行，尝试使用 inBitmap</span></span><br><span class="line">    <span class="keyword">if</span> (Utils.hasHoneycomb()) &#123;</span><br><span class="line">        addInBitmapOptions(options, cache);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeFile(filename, options);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInBitmapOptions</span><span class="params">(BitmapFactory.Options options,ImageCache cache)</span> </span>&#123;</span><br><span class="line"><span class="comment">// inBitmap 只处理可变的位图，所以强制返回可变的位图</span></span><br><span class="line">    options.inMutable = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Bitmap inBitmap = cache.getBitmapFromReusableSet(options);</span><br><span class="line">        <span class="keyword">if</span> (inBitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            options.inBitmap = inBitmap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>使用 ARGB_565 代替 ARGB_888，在不怎么降低视觉效果的前提下，减少内存占用。<br><br>说明：android.graphics.Bitmap.Config 类中关于图片颜色的存储方式定义：<br><br>1) ALPHA_8 代表 8 位 Alpha 位图；<br><br>2) ARGB_4444 代表 16 位 ARGB 位图；<br><br>3) ARGB_8888 代表 32 位 ARGB 位图；<br><br>4) RGB_565 代表 8 位 RGB 位图。<br><br>位图位数越高，存储的颜色信息越多，图像也就越逼真。大多数场景使用的是<br>ARGB_8888 和 RGB_565，RGB_565 能够在保证图片质量的情况下大大减少内存<br>的开销，是解决 oom 的一种方法。<br>但是一定要注意 RGB_565 是没有透明度的，如果图片本身需要保留透明度，那么<br>就不能使用 RGB_565。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Config config = drawableSave.getOpacity() != PixelFormat.OPAQUE ? Config.ARGB_8888 :</span><br><span class="line">Config.RGB_565;</span><br><span class="line">Bitmap bitmap = Bitmap.createBitmap(w, h, config);</span><br></pre></td></tr></table></figure></li><li><p>尽量减少 Bitmap （BitmapDrawable）的使用，尽量使用纯色（ColorDrawable）、<br>渐变色（GradientDrawable）、StateSelector（StateListDrawable）等与 Shape 结<br>合的形式构建绘图。</p></li><li><p>谨慎使用 gif 图片，注意限制每个页面允许同时播放的 gif 图片，以及单个<br>gif 图片的大小。</p></li><li><p>在有强依赖 onAnimationEnd 回调的交互时，如动画播放完毕才能操作页<br>面 ， onAnimationEnd 可 能 会 因 各 种 异 常 没 被 回 调 （ 参 考 ：<br><a href="https://stackoverflow.com/questions/5474923/onanimationend-is-not-getting-calle" target="_blank" rel="noopener">https://stackoverflow.com/questions/5474923/onanimationend-is-not-getting-calle</a><br>d-onanimationstart-works-fine），建议加上超时保护或通过 postDelay 替代<br>onAnimationEnd。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">View v = findViewById(R.id.xxxViewID);</span><br><span class="line"><span class="keyword">final</span> FadeUpAnimation anim = <span class="keyword">new</span> FadeUpAnimation(v);</span><br><span class="line">anim.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">anim.setFillAfter(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">            v.clearAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, anim.getDuration());</span><br><span class="line">v.startAnimation(anim);</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p><strong>当View Animation 执行结束时，调用 View.clearAnimation()释放相关资源。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">View v = findViewById(R.id.xxxViewID);</span><br><span class="line"><span class="keyword">final</span> FadeUpAnimation anim = <span class="keyword">new</span> FadeUpAnimation(v);</span><br><span class="line">anim.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</span><br><span class="line">anim.setDuration(<span class="number">1000</span>);</span><br><span class="line">anim.setFillAfter(<span class="keyword">true</span>);</span><br><span class="line">anim.setAnimationListener(<span class="keyword">new</span> AnimationListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断一下资源是否被释放了</span></span><br><span class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">            v.clearAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">v.startAnimation(anim);</span><br></pre></td></tr></table></figure></li></ol><h3 id="八、安全"><a href="#八、安全" class="headerlink" title="八、安全"></a><strong>八、安全</strong></h3><ol><li><p>【强制】使用 PendingIntent 时，禁止使用空 intent，同时禁止使用隐式 Intent<br><br>说明：<br><br>1) 使用 PendingIntent 时，使用了空 Intent,会导致恶意用户劫持修改 Intent 的内<br>容。禁止使用一个空 Intent 去构造 PendingIntent，构造 PendingIntent 的 Intent<br>一定要设置 ComponentName 或者 action。<br><br>2) PendingIntent 可以让其他 APP 中的代码像是运行自己 APP 中。PendingIntent<br>的intent接收方在使用该intent时与发送方有相同的权限。在使用PendingIntent<br>时，PendingIntent 中包装的 intent 如果是隐式的 Intent，容易遭到劫持，导致<br>信息泄露。<br></p></li><li><p><strong>【强制】</strong>将 android:allowbackup 属性设置为 false，防止 adb backup 导出数据。<br>说明：<br>在 AndroidManifest.xml 文件中为了方便对程序数据的备份和恢复在 Android API<br>level 8 以后增加了 android:allowBackup 属性值。<strong>默认情况下这个属性值为 true</strong>,故<br>当 allowBackup 标志值为 true 时，即可通过 adb backup 和 adb restore 来备份和恢<br>复应用程序数据。</p></li><li><p><strong>【强制】</strong>Receiver/Provider 不能在毫无权限控制的情况下，将 android:export 设置<br>为 true。</p></li><li><p>使用 Intent Scheme URL 需要做过滤。如果浏览器支持 Intent Scheme Uri 语法，如果过滤不当，那么恶意用户可能通过浏<br>览器 js 代码进行一些恶意行为，比如盗取 cookie 等。如果使用了 Intent.parseUri<br>函 数 ， 获 取 的 intent 必 须 严 格 过 滤 ， intent 至 少 包 含<br>addCategory(“android.intent.category.BROWSABLE”) ， setComponent(null) ，<br>setSelector(null)3 个策略。<br> 正例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 intent scheme URL 转换为 intent 对象</span></span><br><span class="line">Intent intent = Intent.parseUri(uri);</span><br><span class="line"><span class="comment">// 禁止没有 BROWSABLE category 的情况下启动 activity</span></span><br><span class="line">intent.addCategory(<span class="string">"android.intent.category.BROWSABLE"</span>);</span><br><span class="line">intent.setComponent(<span class="keyword">null</span>);</span><br><span class="line">intent.setSelector(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 使用 intent 启动 activity</span></span><br><span class="line">context.startActivityIfNeeded(intent, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 反例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = Intent.parseUri(uri.toString().trim().substring(<span class="number">15</span>), <span class="number">0</span>);</span><br><span class="line">intent.addCategory(<span class="string">"android.intent.category.BROWSABLE"</span>);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure><p> 扩展参考：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) https:<span class="comment">//jaq.alibaba.com/community/art/show?articleid=265</span></span><br><span class="line"><span class="number">2</span>) https:<span class="comment">//www.mbsd.jp/Whitepaper/IntentScheme.pdf</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p><strong>【强制】</strong>将所需要动态加载的文件放置在 apk 内部，或应用私有目录中，如果应用<br>必须要把所加载的文件放置在可被其他应用读写的目录中(比如 sdcard)，建议对不<br>可信的加载源进行完整性校验和白名单处理，以保证不被恶意代码注入。</p></li><li><p><strong>【强制】</strong>使用 Android 的 AES/DES/DESede 加密算法时，不要使用默认的加密模式<br>ECB，应显示指定使用 CBC 或 CFB 加密模式。<br><br>说明：<br><br>加密模式 ECB、CBC、CFB、OFB 等，其中 ECB 的安全性较弱，会使相同的铭文<br>在不同的时候产生相同的密文，容易遇到字典攻击，建议使用 CBC 或 CFB 模式。<br><br>1) ECB：Electronic codebook，电子密码本模式<br><br>2) CBC：Cipher-block chaining，密码分组链接模式<br><br>3) CFB：Cipher feedback，密文反馈模式<br><br>4) OFB：Output feedback，输出反馈模式<br></p></li><li><p>对于不需要使用 File 协议的应用，禁用 File 协议，显式设置 webView.<br>getSettings().setAllowFileAccess(false)，对于需要使用 File 协议的应用，禁止 File<br>协议调用 JavaScript，显式设置 webView.getSettings().setJavaScriptEnabled(false)。</p></li><li><p>Android5.0 以后安全性要求较高的应用应该使用 window.setFlag<br>(LayoutParam.FLAG_SECURE) 禁止录屏。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三、Android基本组件&quot;&gt;&lt;a href=&quot;#三、Android基本组件&quot; class=&quot;headerlink&quot; title=&quot;三、Android基本组件&quot;&gt;&lt;/a&gt;&lt;strong&gt;三、Android基本组件&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Activity 间的数据通信，对于数据量比较大的，避免使用 Intent + Parcelable&lt;br&gt;的方式，可以考虑 EventBus 等替代方案，以免造成 TransactionTooLargeException。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Activity 间通过隐式 Intent 的跳转，在发出 Intent 之前必须通过 resolveActivity&lt;br&gt;检查，避免找不到合适的调用组件，造成 ActivityNotFoundException 的异常。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://wiki.96kg.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 基础语法</title>
    <link href="http://wiki.96kg.cn/2019/03/gradle-gradle-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"/>
    <id>http://wiki.96kg.cn/2019/03/gradle-gradle-基础语法.html</id>
    <published>2019-03-22T04:12:05.000Z</published>
    <updated>2019-08-09T08:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、先来一个hello-world"><a href="#一、先来一个hello-world" class="headerlink" title="一、先来一个hello world"></a>一、先来一个hello world</h2><ol><li>新建一个文件夹,并创建build.gradle文件</li><li>在build.gradle中添加如下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">println &apos;hello world&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li><p>执行<code>gradle hello</code>命令<br><img src="https://i.imgur.com/OtM6cyr.png" alt></p></li><li><p>分析结果产生的步骤原因:</p><ol><li>熟悉android对build.gradle不陌生，其实gradle脚本在执行时会从目标目录寻找build.gradle文件，然后根据命令中输入的task名称找对应task去执行（也可以通过-b参数指定<code>.gradle</code>文件）。</li><li>这个脚本定义了一个task任务叫hello，并且添加了一个<strong>action</strong>至task队列中,这个action输出<code>hello world</code>。</li><li><p><code>&lt;&lt;</code>操作符被重写,用以替代doLast<strong>闭包方法</strong>在队列尾部添加<strong>action</strong>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">doLast&#123;</span><br><span class="line">println &apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后通过命令执行hello任务(执行任务队列中<strong>所有</strong>action)</p></li></ol></li></ol><blockquote><p>PS:<code>gradle</code>与<code>gradlew</code>命令:</p><ul><li><code>gradlew</code>命令其实是对<code>gradle</code>命令的包装w是wrapper,包装后便于团队开发过程中gradle构建版本的统一</li><li>可以通过<code>gradle wrapper</code>命令帮助生成gradlew命令对应所需目录文件<br><img src="https://i.imgur.com/p0uilWR.png" alt><br>gradlew在执行时 如果没有对应gradle对应版本会先下载<code>gradle-wrapper.properties</code>文件中distributionUrl中定义版本这里是<code>4.4-bin</code>版本<blockquote><p>distributionBase=GRADLE_USER_HOME<br>distributionPath=wrapper/dists<br>zipStoreBase=GRADLE_USER_HOME<br>zipStorePath=wrapper/dists<br>distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-bin.zip <strong><em>//gradle发行版本下载地址</em></strong></p></blockquote></li></ul></blockquote><hr><h2 id="二、groovy语言-gradle开发所用脚本语言-也可以使用Kotlin"><a href="#二、groovy语言-gradle开发所用脚本语言-也可以使用Kotlin" class="headerlink" title="二、groovy语言(gradle开发所用脚本语言,也可以使用Kotlin)"></a>二、groovy语言(gradle开发所用脚本语言,也可以使用Kotlin)</h2><blockquote><p>groovy是基于JVM虚拟机的一种动态语言,语法于java非常相似,并支持于java语法混合使用。<br>并在java基础上增加闭包、DSL(领域特定语言)的支持等</p></blockquote><ol><li><p>字符串操作<br><code>&#39;字符串&#39;、&quot;字符串&quot;</code>单引号双引号都可以定义字符串,区别是<code>&#39;&#39;</code>纯粹定义字符串<code>&quot;&quot;</code>定义字符串可以运算。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task string &lt;&lt; &#123;</span><br><span class="line">String str1 = &apos;张三&apos; //;号可以省略</span><br><span class="line">String str2 = &quot;李四&quot;</span><br><span class="line">System.out.println(str1)</span><br><span class="line">System.out.println str2 //()都可以省略</span><br><span class="line">println &apos;&lt;----------------------------&gt;&apos;</span><br><span class="line">System.out.println(str1.getClass().getName())</span><br><span class="line">println str2.getClass().name //get方法可以直接像属相一样调用</span><br><span class="line"></span><br><span class="line">println &apos;名称:$&#123;str1&#125;&apos;</span><br><span class="line">println &quot;名称:$&#123;str1&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输入如下:</p><blockquote><p>张三<br> 李四<br> <----------------------------><br> java.lang.String<br> java.lang.String<br> 名称:${str1}<br> 名称:张三</----------------------------></p></blockquote></li><li><p>List集合<br>Groovy完全兼容java集合,并进行扩展使之使用起来更方便</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">task list &lt;&lt; &#123;</span><br><span class="line">List list = [1,2,3,4,5]</span><br><span class="line">def list2 = [1,2,3,4,5]</span><br><span class="line">println list.class.name</span><br><span class="line">println list2.class.name</span><br><span class="line">println &apos;&lt;----------------------------&gt;&apos;</span><br><span class="line">println list</span><br><span class="line">println &quot;第1个元素:$&#123;list[0]&#125;&quot;</span><br><span class="line">println &quot;倒数第2个元素:$&#123;list[-2]&#125;&quot;</span><br><span class="line">println &quot;第2个元素到倒数第2个元素:$&#123;list[1..-2]&#125;&quot;</span><br><span class="line">list.each&#123; //遍历list</span><br><span class="line">print it+&apos;,&apos; //闭包一个参数时可省略声明默认使用it</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输入如下:</p><blockquote><p>java.util.ArrayList<br> java.util.ArrayList<br> <----------------------------><br> [1, 2, 3, 4, 5]<br> 第1个元素:1<br> 倒数第2个元素:4<br> 第2个元素到倒数第2个元素:[2, 3, 4]<br> 1,2,3,4,5,</----------------------------></p></blockquote></li><li><p>Map</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task map &lt;&lt; &#123;</span><br><span class="line">Map map = [&apos;key1&apos;:1024,&apos;key2&apos;:7788,class:&apos;classValue&apos;]</span><br><span class="line">println map.class</span><br><span class="line">println map.getClass().name//这里不能map.class.name 因为.class会认为去map中取值class键</span><br><span class="line">println &apos;&lt;----------------------------&gt;&apos;</span><br><span class="line">println map</span><br><span class="line">println map[&apos;key1&apos;]</span><br><span class="line">println map.key2</span><br><span class="line">map.each&#123; //each遍历it为Map.Entry</span><br><span class="line">print &quot;[$&#123;it.key&#125;,$&#123;it.value&#125;] &quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出如下:</p><blockquote><p>classValue<br> java.util.LinkedHashMap<br> <----------------------------><br> {key1=1024, key2=7788, class=classValue}<br> 1024<br> 7788<br> [key1,1024] [key2,7788] [class,classValue]</----------------------------></p></blockquote></li><li><p>方法</p><ul><li><code>method(param)</code> 括号可以省略<code>method param</code></li><li>return 可以省略,取方法最后一行作为返回值</li><li><p>代码块,代码块允许当做参数传递句号<br>如:<code>list.each({ println it })</code></p><ul><li>groovy规定代码块作为最后一个参数时可以放在括号外边 <code>list.each(){ println it }</code> </li><li>括号可以省略<code>list.each{ println it }</code></li><li>在格式化下,就变成我们常见的模样了 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.each &#123; </span><br><span class="line">println it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JavaBean(模型类get set方法)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Persion&#123;</span><br><span class="line">private String name</span><br><span class="line">public int getAge()&#123;</span><br><span class="line">18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">task getSet&lt;&lt;&#123;</span><br><span class="line">def p = new Persion()</span><br><span class="line">println &quot;name:$&#123;p.name&#125;&quot;</span><br><span class="line">p.name = &apos;张三&apos;</span><br><span class="line">println &quot;name:$&#123;p.name&#125;&quot;</span><br><span class="line">println &quot;age:$&#123;p.age&#125;&quot;//p.age = 12会提示编译不过</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下:</p><blockquote><p>name:null<br>name:张三<br>age:18</p></blockquote></li></ul></li><li><p>闭包</p><ul><li><p>自定闭包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task closePackage &lt;&lt; &#123;</span><br><span class="line">fori &#123;</span><br><span class="line">print it+&quot; &quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">def fori(close)&#123;</span><br><span class="line">for(int i in 0..9)&#123;</span><br><span class="line">close(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><blockquote><p>0 1 2 3 4 5 6 7 8 9</p></blockquote></li><li><p>闭包参数</p><ul><li>当有一个参数时默认为<code>it</code>,可省略声明</li><li><p>多个参数时须一一列出声明</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task closePackage &lt;&lt; &#123;</span><br><span class="line">forMap&#123; key, value-&gt;</span><br><span class="line">print &quot;[$&#123;key&#125;,$&#123;value&#125;] &quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">def forMap(close)&#123;</span><br><span class="line">def map = [&apos;hehe&apos;:1,&apos;haha&apos;:2,&apos;aaa&apos;:3]</span><br><span class="line">map.each&#123;</span><br><span class="line">close(it.key,it.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出:</p><blockquote><p>[hehe,1] [haha,2] [aaa,3]</p></blockquote></li></ul></li><li><p>闭包委托(Closure)<strong>※</strong></p><ul><li><p>Groovy闭包有三个属性</p><ol><li>this 闭包内的 this 指向的定义该闭包的类的实例对象</li><li>owner 该属性和 this 类似，但是闭包中也可以定义闭包的，如果闭包 A 内定义了闭包 B，那么闭包 B 的 owner 指向的是其外部的闭包 A</li><li><p>delegate(委派,代表) 该值初始化时是和 owner 相同的，但是该值可以通过接口将其它对象赋值给 delegate，来实现方法的委托功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">task delegate &lt;&lt; &#123;</span><br><span class="line">method()</span><br><span class="line">def d = new Delegate()</span><br><span class="line">d.method()</span><br><span class="line">d.test&#123;</span><br><span class="line">println &quot;this:$&#123;this.class&#125;&quot;</span><br><span class="line">println &quot;owner:$&#123;owner.class&#125;&quot;</span><br><span class="line">println &quot;delegate:$&#123;delegate.class&#125;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">def method()&#123;</span><br><span class="line">println &quot;&lt;------------out-----------------&gt;&quot;</span><br><span class="line">println &quot;method - this:$&#123;this.getClass().name&#125;&quot;</span><br><span class="line">println &quot;&lt;------------out-----------------&gt;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">class Delegate&#123;</span><br><span class="line">def method()&#123;</span><br><span class="line">println &quot;&lt;-----------Delegate-------------&gt;&quot;</span><br><span class="line">println &quot;method - this:$&#123;this.getClass().name&#125;&quot;</span><br><span class="line">println &quot;&lt;-----------Delegate-------------&gt;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">void test(Closure&lt;Delegate&gt; closure)&#123;</span><br><span class="line">closure(this)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><blockquote><p><------------out-----------------><br>method - this:build_9ghntkkm9h9qlptdttc7f5l5b<br><------------out-----------------></------------out-----------------></------------out-----------------></p></blockquote><blockquote><p><-----------delegate-------------><br>method - this:Delegate<br><-----------delegate-------------></-----------delegate-------------></-----------delegate-------------></p></blockquote><blockquote><p>this:           class build_9ghntkkm9h9qlptdttc7f5l5b<br>owner:          class build_9ghntkkm9h9qlptdttc7f5l5b$_run_closure1<br>delegate:       class build_9ghntkkm9h9qlptdttc7f5l5b$_run_closure1</p></blockquote></li></ol></li><li><p>自定义委托并调整优先级<br>  <code>this</code> 无法处理，则转向 <code>owner</code>，最后在转给 <code>delegate</code>，如果再找不到，那么就会抛出异常。这就是 groovy 提供的默认的策略 <code>this -&gt; owner -&gt; delegate</code></p><p>  当然该顺序也是可以改变的,可以通过闭包的 resolveStrategy 属性，指定不同的策略。</p><ul><li>Closure.OWNER_FIRST 是默认策略。如果属性或者方法存在于 owner 内，那么他可以被 owner 调用，如果不存在，则会尝试在 delegate 类中查找</li><li>Closure.DELEGATE_FIRST 颠倒了默认逻辑：delegate 是第一优先级，其次才是 owner</li><li>Closure.OWNER_ONLY 将仅仅在 owner 查找需要的属性或者方法：delegate 会被忽略</li><li>Closure.DELEGATE_ONLY 将仅仅在 delegate 查找需要的属性或者方法：owner 会被忽略</li><li><p>Closure.TO_SELF 可以被用于当开发人员需要使用先进的元数据编程技术和希望实现一个自定义的选择策略时：这个选择将不是 owner 或者 delegate,而仅仅是 closure 类自己。当我们实现了自己的 Closure 子类时，他才是有意义的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">task delegateChange &lt;&lt; &#123;</span><br><span class="line">persion&#123;</span><br><span class="line">age =  11</span><br><span class="line">name = &apos;张三&apos;</span><br><span class="line">println this</span><br><span class="line">println delegate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">def persion(Closure&lt;Persion&gt; closure)&#123;</span><br><span class="line">def p = new Persion()</span><br><span class="line">closure.delegate = p</span><br><span class="line">closure.setResolveStrategy(Closure.DELEGATE_FIRST)//并不是this被修改为delegate 而是优先取delegate</span><br><span class="line">closure(p)</span><br><span class="line">&#125;</span><br><span class="line">class Persion&#123;</span><br><span class="line">private String name</span><br><span class="line">private int age</span><br><span class="line"></span><br><span class="line">String toString()&#123;</span><br><span class="line">&quot;$&#123;name&#125;, $&#123;age&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">String toString()&#123;</span><br><span class="line">&quot;root&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><blockquote><p>root<br>张三, 11</p></blockquote></li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、先来一个hello-world&quot;&gt;&lt;a href=&quot;#一、先来一个hello-world&quot; class=&quot;headerlink&quot; title=&quot;一、先来一个hello world&quot;&gt;&lt;/a&gt;一、先来一个hello world&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;新建一个文件夹,并创建build.gradle文件&lt;/li&gt;
&lt;li&gt;在build.gradle中添加如下代码&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	println &amp;apos;hello world&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Gradle" scheme="http://wiki.96kg.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>View.OnTouchEvent源码解析</title>
    <link href="http://wiki.96kg.cn/2019/03/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-View-OnTouchEvent.html"/>
    <id>http://wiki.96kg.cn/2019/03/源码解析-View-OnTouchEvent.html</id>
    <published>2019-03-22T04:12:05.000Z</published>
    <updated>2019-08-09T08:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解析都在注释中"><a href="#解析都在注释中" class="headerlink" title="解析都在注释中"></a>解析都在注释中</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">    <span class="comment">//点击，长按，上下文菜单 状态统一判断支持者认为支持点击</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">            || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">            || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line">    <span class="comment">//判断是否View的Enable状态</span></span><br><span class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">            setPressed(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">        <span class="comment">// 可点击的禁用视图仍然会消耗触摸事件，它只是没有回应他们。</span></span><br><span class="line">        <span class="keyword">return</span> clickable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优先有触摸代理</span></span><br><span class="line">    <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是可点击的,或者是支持ToolTip,才走DOWN MOVE UP 等触摸事件序列</span></span><br><span class="line">    <span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//去除触摸屏点击标记</span></span><br><span class="line">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                <span class="keyword">if</span> ((viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">                <span class="comment">//隐藏tooltip</span></span><br><span class="line">                    handleTooltipUp();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                    <span class="comment">// take focus if we don't have it already and we should in</span></span><br><span class="line">                    <span class="comment">// touch mode.</span></span><br><span class="line">                    <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                        focusTaken = requestFocus();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                        <span class="comment">// The button is being released before we actually</span></span><br><span class="line">                        <span class="comment">// showed it as pressed.  Make it show the pressed</span></span><br><span class="line">                        <span class="comment">// state now (before scheduling the click) to ensure</span></span><br><span class="line">                        <span class="comment">// the user sees it.</span></span><br><span class="line">                        setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                        <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//在View不需要获取焦点时执行单击事件</span></span><br><span class="line">                        <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//使用Runnable并发布此消息而不是直接调用performClick。这样可以在单击操作开始之前更新视图的其他可视状态。</span></span><br><span class="line">                            <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                performClick();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                        postDelayed(mUnsetPressedState,</span><br><span class="line">                                ViewConfiguration.getPressedStateDuration());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class="line">                        <span class="comment">// If the post failed, unpress right now</span></span><br><span class="line">                        mUnsetPressedState.run();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                &#125;</span><br><span class="line">                mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">//输入源是触摸屏设备。</span></span><br><span class="line">                <span class="keyword">if</span> (event.getSource() == InputDevice.SOURCE_TOUCHSCREEN) &#123;</span><br><span class="line">                <span class="comment">//添加手指按下flag , 目前仅用于toolTip(Android-25)</span></span><br><span class="line">                    mPrivateFlags3 |= PFLAG3_FINGER_DOWN;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!clickable) &#123;<span class="comment">//不是可点击那就是toolTip</span></span><br><span class="line">                    checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断是否是鼠标右键,是则显示上线文菜单</span></span><br><span class="line">                <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历层次结构以确定我们是否在滚动容器内。</span></span><br><span class="line">                <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></span><br><span class="line">                <span class="comment">// a short period in case this is a scroll.</span></span><br><span class="line">                <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                    <span class="comment">//添加预按压状态</span></span><br><span class="line">                    mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">                    <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//实例化预按压Runable,执行setPressed和checkForLongClick</span></span><br><span class="line">                        mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mPendingCheckForTap.x = event.getX();</span><br><span class="line">                    mPendingCheckForTap.y = event.getY();</span><br><span class="line">                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//显示按下反馈</span></span><br><span class="line">                    setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                    <span class="comment">//设置长按任务延时开始执行</span></span><br><span class="line">                    checkForLongClick(<span class="number">0</span>, x, y);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                    setPressed(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                removeTapCallback();</span><br><span class="line">                removeLongPressCallback();</span><br><span class="line">                mInContextButtonPress = <span class="keyword">false</span>;</span><br><span class="line">                mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line">                mIgnoreNextUpEvent = <span class="keyword">false</span>;</span><br><span class="line">                mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (clickable) &#123;</span><br><span class="line">                    <span class="comment">//更改对应drawable背景变化</span></span><br><span class="line">                    drawableHotspotChanged(x, y);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断移动是否超出当前View , mTouchSlop是溢出值(手指粗看似没出View实则x,y已不再View内添加溢出值规避)</span></span><br><span class="line">                <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</span><br><span class="line">                    <span class="comment">// Outside button</span></span><br><span class="line">                    <span class="comment">// Remove any future long press/tap checks</span></span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    <span class="comment">//如果有按压状态则去除按压状态(PFLAG_PRESSED实在setPressed(true)时添加上的</span></span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                        setPressed(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解析都在注释中&quot;&gt;&lt;a href=&quot;#解析都在注释中&quot; class=&quot;headerlink&quot; title=&quot;解析都在注释中&quot;&gt;&lt;/a&gt;解析都在注释中&lt;/h3&gt;
    
    </summary>
    
    
      <category term="源码解析" scheme="http://wiki.96kg.cn/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 构建脚本基础</title>
    <link href="http://wiki.96kg.cn/2019/03/gradle-gradle-Java%E6%9E%84%E5%BB%BA.html"/>
    <id>http://wiki.96kg.cn/2019/03/gradle-gradle-Java构建.html</id>
    <published>2019-03-22T04:12:05.000Z</published>
    <updated>2019-08-09T08:36:51.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、setting-gradle文件"><a href="#一、setting-gradle文件" class="headerlink" title="一、setting.gradle文件"></a>一、<code>setting.gradle</code>文件</h3><p>gradle设置文件默认名称 setting.gradle , 存放于项目根目录</p><ol><li>配置子工程<br> 在<code>Android Studio</code>中<code>Project</code>和<code>Module</code> , 其中 <code>Module</code>就是Project的子工程需要在配置 如: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos; , &apos;:lib&apos;</span><br><span class="line">project(&apos;lib&apos;).projectDir = new File(rootDir,&quot;libs/lib&quot;)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>Build文件</p><ul><li>每个Project或Module都会有一个Build , 该文件是构建入口</li><li>可以在Build文件中进行版本、插件、依赖等配置</li><li><p>在Root目录中可以获取到所有Child Build文件进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123; //subprojects</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>subprojects和allprojects方法接受闭包对工程进行遍历设置</p></li></ul></li><li><p>Task</p><ul><li>一个Project或者Module对应有多个Task组成</li><li>一个Task是一个原子操作</li><li>Task之见可以相互依赖</li><li><p>创建Task</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task task1&#123;</span><br><span class="line">doFirst&#123;&#125;</span><br><span class="line">doLast&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.create(&quot;task2&quot;)&#123;</span><br><span class="line">doFirst&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Task之间依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task task1&#123;</span><br><span class="line">doFirst&#123; println &apos;task-1&apos;&#125;</span><br><span class="line">&#125;</span><br><span class="line">task task2(dependsOn:task1)&#123;</span><br><span class="line">doFirst&#123; println &apos;task-2&apos;&#125;</span><br><span class="line">&#125;</span><br><span class="line">task task3&#123; //这里并不会执行两边task1</span><br><span class="line">dependsOn task1,task2</span><br><span class="line">doFirst&#123; println &apos;task-3&apos;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入:</p><blockquote><p>gradle -q task1<br>task-1<br>gradle -q task2<br>task-1<br>task-2<br>gradle -q task3<br>task-1<br>task-2<br>task-3</p></blockquote></li></ul></li><li><p>自定义属性</p><ul><li><p>通过应用所属ext属性添加 , 相比局部变量自定义属性更广泛作用域跨Project跨Task访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ext.age = 18</span><br><span class="line">ext&#123;</span><br><span class="line">phone = &apos;1503***9312&apos;</span><br><span class="line">address = &apos;北京&apos;</span><br><span class="line">&#125;</span><br><span class="line">task task1&lt;&lt;&#123;</span><br><span class="line">println &quot;age:$&#123;age&#125; , phone:$&#123;phone&#125; , address:$&#123;address&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>C:\Users\cm\Desktop\test_gradle&gt;gradle -q task1<br>age:18 , phone:1503***9312 , address:北京</p></blockquote></li><li><p>SourceSet中添加属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &quot;java&quot;</span><br><span class="line">sourceSets.all&#123;</span><br><span class="line">ext.aa = &quot;aa&quot;</span><br><span class="line">&#125;</span><br><span class="line">sourceSets&#123;</span><br><span class="line">main&#123;</span><br><span class="line">aa = &quot;main-aa&quot;</span><br><span class="line">&#125;</span><br><span class="line">test&#123;</span><br><span class="line">aa = &apos;test-aa&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">task task1&lt;&lt;&#123;</span><br><span class="line">sourceSets.each&#123;</span><br><span class="line">println &quot;$&#123;it.name&#125;的aa是$&#123;it.aa&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>C:\Users\cm\Desktop\test_gradle&gt;gradle -q task1<br>main的aa是main-aa<br>test的aa是test-aa</p></blockquote></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、setting-gradle文件&quot;&gt;&lt;a href=&quot;#一、setting-gradle文件&quot; class=&quot;headerlink&quot; title=&quot;一、setting.gradle文件&quot;&gt;&lt;/a&gt;一、&lt;code&gt;setting.gradle&lt;/code&gt;文件&lt;/h3&gt;&lt;p&gt;gradle设置文件默认名称 setting.gradle , 存放于项目根目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置子工程&lt;br&gt; 在&lt;code&gt;Android Studio&lt;/code&gt;中&lt;code&gt;Project&lt;/code&gt;和&lt;code&gt;Module&lt;/code&gt; , 其中 &lt;code&gt;Module&lt;/code&gt;就是Project的子工程需要在配置 如: &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;include &amp;apos;:app&amp;apos; , &amp;apos;:lib&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&amp;apos;lib&amp;apos;).projectDir = new File(rootDir,&amp;quot;libs/lib&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Gradle" scheme="http://wiki.96kg.cn/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>通用程序设计（45条-56条）</title>
    <link href="http://wiki.96kg.cn/2019/03/%E9%9A%8F%E7%AC%94-%E9%80%9A%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%8845%E6%9D%A1-56%E6%9D%A1%EF%BC%89.html"/>
    <id>http://wiki.96kg.cn/2019/03/随笔-通用程序设计（45条-56条）.html</id>
    <published>2019-03-22T04:12:05.000Z</published>
    <updated>2019-08-09T08:36:51.873Z</updated>
    
    <content type="html"><![CDATA[<ol><li>局部变量</li></ol><ul><li>控制结构</li><li>类库的用法</li><li>字符串的使用</li><li>优化与命名惯例</li></ul><h2 id="45条：将局部变量的作用最小化"><a href="#45条：将局部变量的作用最小化" class="headerlink" title="45条：将局部变量的作用最小化"></a>45条：将局部变量的作用最小化</h2><ul><li>第一次使用时声明，防止提早声明导致变量混乱以及后续阅读不便</li><li>尽量保证声明时初始化<ul><li>如果没有足够的信息初始化，应该尽量推迟声明</li><li>try-catch语句例外</li></ul></li><li><p>如果循环终止之后不再需要循环变量内容，for循环优先于while循环</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span>(Item i : items) &#123;</span><br><span class="line">     doSomeThing(i);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> Iterator i = c.iterator();</span><br><span class="line"> <span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">     doSomething(i.next());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">Iterator i2 = c.iterator();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext())&#123; <span class="comment">//i.hasNext()会返回false,导致下面的代永远不会执行 </span></span><br><span class="line">     doSomething(i2.next());<span class="comment">//永远不会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="46条：for-each循环优先于传统的for循环"><a href="#46条：for-each循环优先于传统的for循环" class="headerlink" title="46条：for-each循环优先于传统的for循环"></a>46条：for-each循环优先于传统的for循环</h2><ul><li><p>对比写法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    doSomeThing(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Element e : elements)&#123;</span><br><span class="line">    doSomeThing(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思考一个例子(找BUG)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Suit&#123; CLUB,DIAMOND,HEART,SPADE&#125; <span class="comment">//四种花色</span></span><br><span class="line"><span class="keyword">enum</span> Rank&#123; ACE,DEUCE,THREE,FOUR,FIVE,SIX,</span><br><span class="line">            SEVEV,EIGHT,NINE,TEN,JACK,QUEEN,KING &#125;<span class="comment">//每种花色13张牌</span></span><br><span class="line">class Card(suit:Suit,rank:Rank);</span><br><span class="line">            </span><br><span class="line">Collection&lt;Suit&gt; suits = Arrays.asList(Suit.values());</span><br><span class="line">Collection&lt;Rank&gt; ranks = Arrays.asList(Rank.values());</span><br><span class="line">List&lt;Card&gt; deck= <span class="keyword">new</span> ArrayList&lt;Card&gt;();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator();i.hasNext();) </span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator();j.hasNext();)</span><br><span class="line">        deck.add(<span class="keyword">new</span> Card(i.next(), j.next()));</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br><br><br></p><p><br><br><br><br><br></p><ul><li>BUG：数字循环13次，花色有4种<code>i.next()</code>4次执行以后抛出<code>java.util.NoSuchElementException</code>没有元素异常</li><li><p>更换两个for循环位置可以解决么？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator();j.hasNext();)</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator();i.hasNext();) </span><br><span class="line">        deck.add(<span class="keyword">new</span> Card(i.next(), j.next()));</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br><br><br></p><p><br><br><br><br><br></p><ul><li><p>两种种解法</p><ul><li><p>要么在循环花色时提出一个局部变量引用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator();i.hasNext();) </span><br><span class="line">   Suit suit = i.next();</span><br><span class="line">   <span class="keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator();j.hasNext();)</span><br><span class="line">       deck.add(<span class="keyword">new</span> Card(suit, j.next()));</span><br></pre></td></tr></table></figure></li><li><p>使用for-each替换传统for循环</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (Suit suit:Suit.values()) </span><br><span class="line">   for (Rank rank:Rank.values())</span><br><span class="line">       deck.add( new Card(suit, rank));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>三种例外不能使用for-each</p><ol><li>过滤(需要Iterator引用调用remove时)</li><li>转换（如：冒泡时需要同时使用前后两个元素）</li><li>平行迭代（同时迭代多个集合时）</li></ol></li></ul><h2 id="47条：了解和使用类库"><a href="#47条：了解和使用类库" class="headerlink" title="47条：了解和使用类库"></a>47条：了解和使用类库</h2><h5 id="1-小例子（返回一个小于n的随机数"><a href="#1-小例子（返回一个小于n的随机数" class="headerlink" title="1. 小例子（返回一个小于n的随机数)"></a>1. 小例子（返回一个小于n的随机数)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(rnd.nextInt()) % n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果n是一个比较小的2的乘方（2<sup>n</sup>），经过一段相当短的周期之后，它产生的随机数会重复。</li><li>如果n不是2的乘法时，有些数值会出现的更频繁一些。（量级比较大时会出现百分66.6概率出现前半段数值之内）</li><li>Math.abs()对Integer.MIN_VALUE去非负时返回Integer.MIN_VALUE</li></ul><p><strong>如果要修正错误需，了解伪随机数生成器、数论、2的补码算法等相关知识。</strong></p><h5 id="2-使用类库中方法"><a href="#2-使用类库中方法" class="headerlink" title="2. 使用类库中方法"></a>2. 使用类库中方法</h5><ul><li>直接使用<code>Random.nextInt(int)</code>避免问题</li><li>多了解类库，多阅读类库实现原理及实现方式，类库的代码比你自己编写的代码更好一些，并随着时间推移而不断改进。<ul><li>java.io </li><li>java.lang </li><li>java.util </li><li>java.util.concurrent</li></ul></li></ul><h1 id="48条：如果要精确的答案，请避免使用float和double"><a href="#48条：如果要精确的答案，请避免使用float和double" class="headerlink" title="48条：如果要精确的答案，请避免使用float和double"></a>48条：如果要精确的答案，请避免使用float和double</h1><p><strong>使用float和double计算时，结果并不精确而是较为精确的快速近似结果,y尤其不能用来计算<em>金钱</em>。</strong><br>如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1.03</span> - <span class="number">0.42</span>);<span class="comment">//输出结果是0.610000000000000001</span></span><br><span class="line">System.out.println(<span class="number">1.00</span> - <span class="number">9</span> * <span class="number">0.1</span>);<span class="comment">//输出结果是0.099999999999999998</span></span><br></pre></td></tr></table></figure></p><ul><li>代替方式<ul><li>使用BigDecimal计算<ul><li>与float和double相比很不方便</li><li>计算速度很慢</li></ul></li><li>使用int或long代表更小单位计算（如时间计算中微秒，钱的计算中当做分而不是元）</li></ul></li></ul><h1 id="49条：基本类型优先于装箱基本类型"><a href="#49条：基本类型优先于装箱基本类型" class="headerlink" title="49条：基本类型优先于装箱基本类型"></a>49条：基本类型优先于装箱基本类型</h1><table><thead><tr><th style="text-align:center">基本类型</th><th style="text-align:center">装箱基本类型</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><p>java-1.5加入自动装箱与自动拆箱（<code>Integer a = 10; int b = a</code>），这些特性并没有完全抹去基本类型与装箱基本类型区别。<br>如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer first,Integer second)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first &lt; second ? -<span class="number">1</span> : (first == second ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不考虑null，比较new Integer(42)和new Integer(42)，返回1而不是0</p><h1 id="50条：如果其他类型更适合，则尽量避免使用字符串"><a href="#50条：如果其他类型更适合，则尽量避免使用字符串" class="headerlink" title="50条：如果其他类型更适合，则尽量避免使用字符串"></a>50条：如果其他类型更适合，则尽量避免使用字符串</h1><ul><li>字符串不适合代替其它的值类型（如使用gson解析时模型类不要都定义成String）</li><li>字符串不适合替代枚举类型<br>枚举类型比字符串更加适合用来表示枚举类型的常量</li><li>字符串不适合代替聚集类型<br>如果一个实体有多个组件，用一个字符串来表示这个实体通常是不恰当的<br><code>String compoundKey = className + &quot;#&quot; + i.next();</code><br><br>为了拿到组件信息就必须解析字符串，还不可以使用equals、toString或者compareTo等方法。更好的做法是，简单的编写一个类来描述这个数据集，通常是一个私有的静态成员类。</li></ul><h1 id="51条：当心字符串连接的性能"><a href="#51条：当心字符串连接的性能" class="headerlink" title="51条：当心字符串连接的性能"></a>51条：当心字符串连接的性能</h1><ul><li>字符串是不可变的，当使用+链接时，会拷贝两个字符串到一个更大的字符串中。少量固定长度时可以使用非常适合，大量拼接时特别耗时。</li><li>在字符串大量拼接时使用StringBuffer或者使用非同步的StringBuild来代替String。二者比使用+链接String快几十倍以上。</li></ul><h1 id="52条：通过接口引用对象"><a href="#52条：通过接口引用对象" class="headerlink" title="52条：通过接口引用对象"></a>52条：通过接口引用对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;X&gt; list= <span class="keyword">new</span> ArrayList&lt;X&gt;() </span><br><span class="line">Map&lt;X,X&gt; map = <span class="keyword">new</span> HashMap&lt;X,X&gt;()</span><br></pre></td></tr></table></figure><ul><li>尽量使用接口而不是类作为参数的类型</li><li>如果没有合适的接口，可以使用父类,基类做引用对象</li></ul><p><em>利用多态,达到方便扩展的目的</em></p><h1 id="53条：接口优先于反射机制"><a href="#53条：接口优先于反射机制" class="headerlink" title="53条：接口优先于反射机制"></a>53条：接口优先于反射机制</h1><ul><li>使用反射时损失：<ul><li><strong>丧失了编译时类型检查的好处</strong>，包括异常检査（反射方式调用不存在的或者不可访问的方法）</li><li><strong>执行反射访问所需要的代码非常笨拙和冗长</strong></li><li><strong>性能</strong></li><li><strong>增加阅读难度，代码冗余</strong></li></ul></li><li>合理使用反射，甚至必须依赖反射，如<strong>APT框架</strong>，keyboard中的Cube集成时，通过反射注解生成云控调用方法。</li></ul><p>反射机制是一种功能强大的机制，对于特定的复杂系统编程任务，它是非常必要的，但它也有一些<strong>缺点</strong>。如果非<strong>必要</strong>请避免使用。</p><h1 id="54条：谨慎使用本地（native）方法"><a href="#54条：谨慎使用本地（native）方法" class="headerlink" title="54条：谨慎使用本地（native）方法"></a>54条：谨慎使用本地（native）方法</h1><p><strong>使用native的方法提高性能不提倡</strong>，随着java的迭代，native方法不一定比java方法快。如在java1.1版本时<code>BigInteger</code>，为提高性能使用C编写，到了java1.3版本已经完全改用java编写并进行了性能优化。1.3版本中<code>BigInteger</code>比1.1版本更快。在这些年VM已经变得很快了</p><h1 id="55条：谨慎地进行优化"><a href="#55条：谨慎地进行优化" class="headerlink" title="55条：谨慎地进行优化"></a>55条：谨慎地进行优化</h1><ul><li>不要因为性能而牺牲合理的结构。要努力编写好的程序而不是快的栏序。</li><li>在每次试图做优化之前和之后，要对性能进行测量。你可能会惊讶于自己的发现。试图做的优化通常对于性能井没有明显的影响，甚至会使性能变得更差。</li><li>不要费力去编写快速的程序——应该努力编写好的程序，速度自然会随之而来。在设计系统的时候，特别是在设计API、线路层协议和永久数据格式的时候，一定要考虑性能的因素。当构建完系统之后，要测量它的性能。如果它足够快，你的任务就完成了。</li></ul><h1 id="56条：遵守普遍接受的命名惯例"><a href="#56条：遵守普遍接受的命名惯例" class="headerlink" title="56条：遵守普遍接受的命名惯例"></a>56条：遵守普遍接受的命名惯例</h1><ol><li>包的名称<ul><li>以组织的Internet域名开头，例如：com.cmcm、com.sun</li><li>包名称的其余部分应该包括一个或者多个描述该包的组成部分。这些组成部分应该比较简短，通常不超过8个字符。鼓励使用有意义的缩写形式。如使用utils而不是utilities</li></ul></li></ol><ul><li>类和接口的名称<br>  遵循大驼峰法命名。如：TimerTask、HttpUrl</li><li>方法和域的名称<ul><li>常量域：包括一个或多个大写的单词，中间用下划线隔开。<strong>常量域是唯一一个推荐使用下划线的情形。</strong></li><li>成员变量 m开头、静态变量 s开头、 boolean变量 使用is开头</li><li>泛型时名称：T表示任意类型的，E表示集合元素类型，K和V表示映射的键和值类型，X表示异常。同时使用多个任何类型的时，可以是T、U、V或者T1、T2、T3。</li><li>转换类型的方法、返回不同的类型独立对象方法，通常被称为toType，例如toString和toArray</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;控制结构&lt;/li&gt;
&lt;li&gt;类库的用法&lt;/li&gt;
&lt;li&gt;字符串的使用&lt;/li&gt;
&lt;li&gt;优化与命名惯例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;45条：将局部变量的作用最小化&quot;&gt;&lt;a href=&quot;#45条：将局部变量的作用最小化&quot; class=&quot;headerlink&quot; title=&quot;45条：将局部变量的作用最小化&quot;&gt;&lt;/a&gt;45条：将局部变量的作用最小化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;第一次使用时声明，防止提早声明导致变量混乱以及后续阅读不便&lt;/li&gt;
&lt;li&gt;尽量保证声明时初始化&lt;ul&gt;
&lt;li&gt;如果没有足够的信息初始化，应该尽量推迟声明&lt;/li&gt;
&lt;li&gt;try-catch语句例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果循环终止之后不再需要循环变量内容，for循环优先于while循环&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Item i : items) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     doSomeThing(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Iterator i = c.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i.hasNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     doSomething(i.next());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Iterator i2 = c.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i.hasNext())&amp;#123; &lt;span class=&quot;comment&quot;&gt;//i.hasNext()会返回false,导致下面的代永远不会执行 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     doSomething(i2.next());&lt;span class=&quot;comment&quot;&gt;//永远不会执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://wiki.96kg.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://wiki.96kg.cn/2019/03/Markdow%E8%AF%AD%E6%B3%95.html"/>
    <id>http://wiki.96kg.cn/2019/03/Markdow语法.html</id>
    <published>2019-03-22T04:12:05.000Z</published>
    <updated>2019-08-09T08:36:51.871Z</updated>
    
    <content type="html"><![CDATA[<p>(<a href="https://github.com/guodongxiaren/README" target="_blank" rel="noopener">来自GFM</a>)</p><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><hr><p>***、—、___可以显示横线效果</p><hr><hr><hr><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h3><p>这是一段普通的文本</p><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>Hello,大家好，我是Mainli。</code></pre><p>在一行开头加入1个Tab或者4个空格。</p><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><h4 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h4><p>在连续几行的文本开头加入1个Tab或者4个空格。</p><pre><code>欢迎到访很高兴见到您祝您，早上好，中午好，下午好，晚安</code></pre><h4 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h4><p>使用一对各三个的反引号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">欢迎到访</span><br><span class="line">我是C++码农</span><br><span class="line">你可以在知乎、CSDN、简书搜索【Mainli】找到我</span><br></pre></td></tr></table></figure></p><p>该语法也可以实现代码高亮，见<a href="#代码高亮">代码高亮</a></p><h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><p>文字高亮功能能使行内部分文字高亮，使用一对反引号。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`linux` `网络编程` `socket` `epoll`</span><br></pre></td></tr></table></figure></p><p>效果：<code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p><p>也适合做一篇文章的tag</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>直接回车不能换行，<br>可以在上一行文本后面补两个空格，<br>这样下一行的文本就换行了。</p><p>或者就是在两行文本直接加一个空行。</p><p>也能实现换行效果，不过这个行间距有点大。</p><h4 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h4><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>*斜体1*</code></td><td><em>斜体1</em></td></tr><tr><td><code>_斜体2_</code></td><td><em>斜体2</em></td></tr><tr><td><code>**粗体1**</code></td><td><strong>粗体1</strong></td></tr><tr><td><code>__粗体2__</code></td><td><strong>粗体2</strong></td></tr><tr><td><code>这是一个 ~~删除线~~</code></td><td>这是一个 <del>删除线</del></td></tr><tr><td><code>***斜粗体1***</code></td><td><strong><em>斜粗体1</em></strong></td></tr><tr><td><code>___斜粗体2___</code></td><td><strong><em>斜粗体2</em></strong></td></tr><tr><td><code>***~~斜粗体删除线1~~***</code></td><td><strong><em><del>斜粗体删除线1</del></em></strong></td></tr><tr><td><code>~~***斜粗体删除线2***~~</code></td><td><del><strong><em>斜粗体删除线2</em></strong></del></td></tr></tbody></table><pre><code>斜体、粗体、删除线可混合使用</code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt](URL title)</span><br></pre></td></tr></table></figure></p><p>alt和title即对应HTML中的alt和title属性（都可省略）：</p><ul><li>alt表示图片显示失败时的替换文本</li><li>title表示鼠标悬停在图片时的显示文本（注意这里要加引号）</li></ul><p>URL即图片的url地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他github仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>#</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>1</td><td><code>![baidu](https://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</code></td><td><img src="https://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td></tr><tr><td>2</td><td><code>![][foryou]</code></td><td><img src="https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif" alt></td></tr></tbody></table><p>注意例2的写法使用了<strong>URL标识符</strong>的形式，在<a href="#链接">链接</a>一节有介绍。</p><blockquote><p>在文末有foryou的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[foryou]:https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="链接外部URL"><a href="#链接外部URL" class="headerlink" title="链接外部URL"></a>链接外部URL</h3><table><thead><tr><th>#</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>1</td><td><code>[我的博客](https://blog.csdn.net/guodongxiaren &quot;悬停显示&quot;)</code></td><td><a href="https://blog.csdn.net/guodongxiaren" title="悬停显示" target="_blank" rel="noopener">我的博客</a></td></tr><tr><td>2</td><td><code>[我的知乎][zhihu]</code></td><td><a href="https://www.zhihu.com/people/jellywong" title="我的知乎，欢迎关注" target="_blank" rel="noopener">我的知乎</a></td></tr></tbody></table><p>语法2由两部分组成：</p><ul><li>第一部分使用两个中括号，[ ]里的标识符（本例中zhihu），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为URL标识符</strong>）</li><li>第二部分标记实际URL。</li></ul><blockquote><p>使用URL标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。</p><blockquote><p>URL标识符是我起的名字，不知道是否准确。囧。。</p></blockquote></blockquote><h3 id="链接本仓库里的URL"><a href="#链接本仓库里的URL" class="headerlink" title="链接本仓库里的URL"></a>链接本仓库里的URL</h3><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>[我的简介](/example/profile.md)</code></td><td><a href="/example/profile.md">我的简介</a></td></tr><tr><td><code>[example](./example)</code></td><td><a href="./example">example</a></td></tr></tbody></table><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。<br>直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。</p><table><thead><tr><th>#</th><th>语法</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td>1</td><td><code>[![weibo-logo]](https://weibo.com/linpiaochen)</code></td><td style="text-align:center"><a href="https://weibo.com/linpiaochen" target="_blank" rel="noopener"><img src="/img/weibo.png" alt="weibo-logo" title="点击图片进入我的微博"></a></td></tr><tr><td>2</td><td><code>[![](/img/zhihu.png &quot;我的知乎，欢迎关注&quot;)][zhihu]</code></td><td style="text-align:center"><a href="https://www.zhihu.com/people/jellywong" title="我的知乎，欢迎关注" target="_blank" rel="noopener"><img src="/img/zhihu.png" alt title="我的知乎，欢迎关注"></a></td></tr><tr><td>3</td><td><code>[![csdn-logo]][csdn]</code></td><td style="text-align:center"><a href="https://blog.csdn.net/guodongxiaren" title="我的博客" target="_blank" rel="noopener"><img src="/img/csdn.png" alt="csdn-logo" title="我的CSDN博客"></a></td></tr></tbody></table><p>因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。<br>注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。</p><blockquote><p>本文URL标识符都放置于文末</p></blockquote><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>其实呢，每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，比如我们 </p><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>[回到顶部](#readme)</code></td><td><a href="#readme">回到顶部</a></td></tr></tbody></table><p>不过要注意，标题中的英文字母都被转化为<strong>小写字母</strong>了。</p><blockquote><p>以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 昵称：Mainli</span><br><span class="line">- 别名：Mainli</span><br><span class="line">* 英文名：Mainli</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><ul><li>昵称：Mainli</li></ul><ul><li>别名：Mainli</li></ul><ul><li>英文名：Mainli</li></ul><h3 id="多级无序列表"><a href="#多级无序列表" class="headerlink" title="多级无序列表"></a>多级无序列表</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 编程语言</span><br><span class="line">    * 脚本语言</span><br><span class="line">        * Python</span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><ul><li>编程语言<ul><li>脚本语言<ul><li>Python</li></ul></li></ul></li></ul><h3 id="一级有序列表"><a href="#一级有序列表" class="headerlink" title="一级有序列表"></a>一级有序列表</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">面向对象的三个基本特征：</span><br><span class="line"></span><br><span class="line">1. 封装</span><br><span class="line">2. 继承</span><br><span class="line">3. 多态</span><br></pre></td></tr></table></figure></p><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p>面向对象的三个基本特征：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><h3 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h3><p>和无序列表一样，有序列表也有多级结构。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 这是一级的有序列表，数字1还是1</span><br><span class="line">   1. 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字</span><br><span class="line">      1. 这是三级的有序列表，数字在显示的时候变成了英文字母</span><br></pre></td></tr></table></figure><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><ol><li>这是一级的有序列表，数字1还是1<ol><li>这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字<ol><li>这是三级的有序列表，数字在显示的时候变成了英文字母</li></ol></li></ol></li></ol><h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- [x] 需求分析</span><br><span class="line">- [x] 系统设计</span><br><span class="line">- [x] 详细设计</span><br><span class="line">- [ ] 编码</span><br><span class="line">- [ ] 测试</span><br><span class="line">- [ ] 交付</span><br></pre></td></tr></table></figure><h4 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4><ul><li style="list-style: none"><input type="checkbox" checked> 需求分析</li><li style="list-style: none"><input type="checkbox" checked> 系统设计</li><li style="list-style: none"><input type="checkbox" checked> 详细设计</li><li style="list-style: none"><input type="checkbox"> 编码</li><li style="list-style: none"><input type="checkbox"> 测试</li><li style="list-style: none"><input type="checkbox"> 交付</li></ul><p>您可以使用这个功能来标注某个项目各项任务的完成情况。</p><blockquote><p>Tip:</p><blockquote><p>在GitHub的<strong>issue</strong>中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。</p></blockquote></blockquote><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><h3 id="常用于引用文本"><a href="#常用于引用文本" class="headerlink" title="常用于引用文本"></a>常用于引用文本</h3><h4 id="文本摘自《深入理解计算机系统》P27"><a href="#文本摘自《深入理解计算机系统》P27" class="headerlink" title="文本摘自《深入理解计算机系统》P27"></a>文本摘自《深入理解计算机系统》P27</h4><p>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p><blockquote><p><strong>“端”（endian）的起源</strong><br>以下是Jonathan Swift在1726年关于大小端之争历史的描述：<br>“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p></blockquote><h3 id="块引用有多级结构"><a href="#块引用有多级结构" class="headerlink" title="块引用有多级结构"></a>块引用有多级结构</h3><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 数据结构</span><br><span class="line">&gt;&gt; 树</span><br><span class="line">&gt;&gt;&gt; 二叉树</span><br><span class="line">&gt;&gt;&gt;&gt; 平衡二叉树</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 满二叉树</span><br></pre></td></tr></table></figure><h4 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h4><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p><blockquote><p>平衡二叉树</p><blockquote><p>满二叉树</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。</p><h3 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;&#125; <span class="comment">//Java</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> <span class="comment">//C</span></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello GitHub"</span> <span class="comment">#Bash</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myH1"</span>).innerHTML=<span class="string">"Welcome to my Homepage"</span>; <span class="comment">//javascipt</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">string</span>&amp; A,<span class="keyword">const</span> <span class="built_in">string</span>&amp; B) <span class="comment">//cpp</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td><td></td></tr><tr><td>表格单元</td><td>表格单元</td><td></td></tr></tbody></table><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td></tr><tr><td>表格单元</td><td>表格单元</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>表格可以指定对齐方式</p><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:center">居中</th><th style="text-align:right">右对齐</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><h3 id="混合其他语法"><a href="#混合其他语法" class="headerlink" title="混合其他语法"></a>混合其他语法</h3><p>表格单元中的内容可以和其他大多数GFM语法配合使用，如：  </p><h4 id="使用普通文本的删除线，斜体等效果"><a href="#使用普通文本的删除线，斜体等效果" class="headerlink" title="使用普通文本的删除线，斜体等效果"></a>使用普通文本的删除线，斜体等效果</h4><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Help</td><td><del>Display the</del> help window.</td></tr><tr><td>Close</td><td><em>Closes</em> a window</td></tr></tbody></table><h4 id="表格中嵌入图片（链接）"><a href="#表格中嵌入图片（链接）" class="headerlink" title="表格中嵌入图片（链接）"></a>表格中嵌入图片（链接）</h4><p>其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。</p><table><thead><tr><th>图片</th><th>描述</th></tr></thead><tbody><tr><td><img src="https://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td><td>百度</td></tr></tbody></table><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>比如<code>:blush:</code>，可以显示:blush:。</p><p>具体每一个表情的符号码，可以查询GitHub的官方网页<a href="http://www.emoji-cheat-sheet.com" target="_blank" rel="noopener">http://www.emoji-cheat-sheet.com</a>。</p><p>但是这个网页每次都打开<strong>奇慢</strong>。。所以我整理到了本repo中，大家可以直接在此查看<a href="./emoji.md">emoji</a>。</p><h2 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h2><p>版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。<br>GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。</p><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><p>其语法与代码高亮类似，只是在三个反引号后面写diff，<br>并且其内容中，以 <code>+</code>开头表示新增，<code>-</code>开头表示删除。</p><h4 id="效果-7"><a href="#效果-7" class="headerlink" title="效果"></a>效果</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 鸟宿池边树，僧敲月下门</span></span><br><span class="line"><span class="deletion">- 鸟宿池边树，僧推月下门</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(&lt;a href=&quot;https://github.com/guodongxiaren/README&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;来自GFM&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;横线&quot;&gt;&lt;a href=&quot;#横线&quot; class=&quot;headerlink&quot; title=&quot;横线&quot;&gt;&lt;/a&gt;横线&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;***、—、___可以显示横线效果&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://wiki.96kg.cn/tags/Markdown/"/>
    
  </entry>
  
</feed>
